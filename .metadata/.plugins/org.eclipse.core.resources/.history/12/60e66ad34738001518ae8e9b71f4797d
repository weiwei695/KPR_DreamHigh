<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright 2011-2014 Marvell Semiconductor, Inc. Licensed under the Apache 
    License, Version 2.0 (the "License"); you may not use this file except in 
    compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
    Unless required by applicable law or agreed to in writing, software distributed 
    under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
    OR CONDITIONS OF ANY KIND, either express or implied. See the License for 
    the specific language governing permissions and limitations under the License. -->

<program xmlns="http://www.kinoma.com/kpr/1">

    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- HANDLERS -->
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <handler path="/gotAnalogResult">
        <behavior><![CDATA[
        	function onInvoke( handler, message ){
        	/*	var result = message.requestObject;  
        		application.distribute( "onTemValueChanged", result ); 	
        		application.distribute( "onHumValueChanged", result );	*/
        		application.invoke(new MessageWithObject("pins:/motor/motor_ENA_turnon?"));
        		var result = "打开使能";
        		application.distribute( "onTemValueChanged", result );
        		sensorUtils.delay(5);
        		application.invoke(new MessageWithObject("pins:/motor/motor_DIR_FWD?"));
        		result = "电机正转";
        		application.distribute( "onTemValueChanged", result );
        		sensorUtils.delay(10);
        		application.invoke(new MessageWithObject("pins:/motor/motor_DIR_CW?"));
        		result = "电机反转";
        		application.distribute( "onTemValueChanged", result );
        		sensorUtils.delay(10);
        		application.invoke(new MessageWithObject("pins:/motor/motor_ENA_turnoff?"));
        		result = "关闭使能";
        		application.distribute( "onTemValueChanged", result );
        		application.invoke(new MessageWithObject("pins:/motor/motor_stop?"));
        	}
        ]]></behavior>
    </handler>

    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- LAYOUTS -->
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <container id="MainContainer" top="0" left="0" bottom="0"
        right="0">
        <skin color="white" />
        <label left="0" right="0" top="70" name="temperature" string="'- - -'">
            <style font="46px" color="black" />
            <behavior>
                <method id="onTemValueChanged" params="content, result"><![CDATA[
                      //content.string = "T: " + result.TData + "C";
                      content.string = result;
				]]></method>
            </behavior>
        </label>
        <label left="0" right="0" top="100" name="humidity" string="'- - -'">
            <style font="46px" color="black" />
            <behavior>
                <method id="onHumValueChanged" params="content, result"><![CDATA[
                      //content.string = "H: " + result.RHData + "H";
                      content.string = result;
				]]></method>
            </behavior>
        </label>
    </container>

    <script><![CDATA[
        /* Create message for communication with hardware pins.
    	   analogSensor: name of pins object, will use later for calling 'analogSensor' methods.
    	   require: name of js or xml bll file.
    	   pins: initializes 'analog' (matches 'analog' object in the bll)
    	  	   	 with the given pin numbers. Pin types and directions
    	  		 are set within the bll.	*/
		application.invoke( new MessageWithObject( "pins:configure", {
        	DHT11: {
                require: "DHT11",
                pins: {
                    dht11: { pin: 52 }
                }
            },
            motor: {
            	require: "stepping_motor",
            	pins:{
            		motor: { pin: 28 },
            		motor_DIR: { pin: 3 },
            		motor_ENA: { pin: 4 }
            	}
            }
        }) , Message.JSON);

    	/* Use the initialized analogSensor object and repeatedly 
    	   call its read method with a given interval.  */
	/*	application.invoke( new MessageWithObject( "pins:/DHT11/start_DHT11?" + 
			serializeQuery( {
				repeat: "off",
				interval: 20,
				callback: "/gotAnalogResult"
		} ) ));*/
		
		application.invoke( new MessageWithObject( "pins:/motor/motor_rotate?" + 
			serializeQuery( {
				repeat: "off",
				callback: "/gotAnalogResult"
		} ) ));
		

		application.add( new MainContainer() );           
    ]]></script>
</program>