<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">

<!--
  This is the client side for Digital-rack-Websockets, a remote rack switch for the server.
  Intended for use as a phone or desktop companion app with the Kinoma Create.  
-->

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- ASSETS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<skin id="MainSkin" color="#F0F0F0"/>
	<skin id="ButtonSkin" color="blue"/>
	<skin id="ButtonSkinPressed" color="red"/>
<style id="ButtonStyle" color="white" font="bold 20px Helvetica, sans-serif"/>


	<skin id= "offSkin" color="#00FFFFFF"/>
	<skin id= "pressedSkin" color="#B0FFFFFF"/>
	<skin id= "onSkin" color="#D9FFFFFF" /> 	
	

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- HANDLERS -->
<!-- +++++++++++发现服务器与清除服务器++++++++++++++++++ -->
    	
	<handler path="/discover">
		<behavior>
			<method id="onComplete" params="container, message, json"><![CDATA[
				//Recieves and stores server info and changes rack switch to match server's state. 
				var query = parseQuery( message.query );
				var server = model.getServer( query.uuid );
				server.update( json );
				server.conn = model.doConnect( server.url );
				application.distribute( json.rackState );
			]]></method>
			<method id="onInvoke" params="handler, message"><![CDATA[
				//Uses SSDP to find and connect to available servers.
				//Then opens a Websocket with each server.
				var discovery = JSON.parse( message.requestText );
				var serversTable = model.getServersTable();
				var uuid = discovery.uuid;
				if ( !( uuid in serversTable ) ) {
					var server = new Server( discovery );
					var message = server.createMessage( "info", { uuid: server.uuid } );
					handler.invoke( message, Message.JSON );
					serversTable[ server.uuid ] = server;
				}
			]]></method>
		</behavior>
	</handler>

	<handler path="/forget">
		<behavior>
			<method id="onInvoke" params="handler, message"><![CDATA[
				//Removes a disconnected server from the serversTable.
				var discovery = JSON.parse( message.requestText );
				var serversTable = model.getServersTable();
				var uuid = discovery.uuid;
				if ( uuid in serversTable ) {
					delete serversTable[ uuid ];
				}
			]]></method>
		</behavior>
	</handler>


<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- BEHAVIORS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
	<behavior id="ApplicationBehavior">
		<method id="onLaunch" params="application"><![CDATA[
			application.discover( "digitalrackwebsocketsserver.example.kinoma.marvell.com" );
			application.shared = true;
			this.serversTable = {};
		]]></method>
		<method id="onQuit" params="application"><![CDATA[
			var serversTable = this.serversTable;
			for ( var uuid in serversTable ) {
				var server = serversTable[ uuid ];
				server.conn.close();
			}		
			application.forget( "digitalrackwebsocketsserver.example.kinoma.marvell.com" );
			application.shared = false;
		]]></method>
		
		
		
		<method id="ON" params="container"><![CDATA[
            application.invoke( new MessageWithObject( "pins:/rack/turnOn" ) );   
            
			for ( i = 0; i < clients.length; i++ ) {			
				clients[ i ].send( "rackIsOn" );
			}
			
			rackState = "rackIsOn";
			
        ]]></method>
        <method id="OFF" params="container"><![CDATA[
              application.invoke( new MessageWithObject( "pins:/rack/turnOff" ) ); 
              	 
			for ( i = 0; i < clients.length; i++ ) {			
				clients[ i ].send( "rackIsOff" );
			}
			
			rackState = "rackIsOff";
        ]]></method>
        
        
        
		<method id="doConnect" params="url"><![CDATA[
			var conn = new WebSocket( url );

			conn.onopen = function() {
			};

			conn.onmessage = function( e ) {
				//e.data == name of method to call
				application.distribute( e.data );
				//trace("e.data:"+e.data);
			};

			conn.onclose = function() {
			};

			conn.onerror = function( e ) {
			};
			
			return conn;			        
        ]]></method> 
        <method id="clicked" params="content, rackState"><![CDATA[
			var serversTable = this.serversTable;
			for ( var uuid in serversTable ) {
				var server = serversTable[ uuid ];
				server.conn.send( rackState );
			}				
		]]></method>
		<method id="getServer" params="uuid"><![CDATA[
			return this.serversTable[ uuid ];
		]]></method>
		<method id="getServersTable" params=""><![CDATA[
			return this.serversTable;
		]]></method>
	</behavior>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- LAYOUTS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
	
    <container id="MainContainer" top="0" left="0" bottom="0" right="0" skin="MainSkin"> 	     
  <!-- ++++++++++++++温湿度显示+++++++++++++++++++++ -->
       <container top="20" left="20" bottom="100" right="20" skin="MainSkin" active="true">
           <label left="0" right="0" top="10" name="temperature"  string="'Temperature: loading'">
            <style font="bold 20px" color="blue" />
            <behavior>
                <method id="onTemValueChanged" params="content, result"><![CDATA[
                      content.string = "Temperature: " + result.TData + '°F';
				]]></method>
            </behavior>
           </label>
            <label left="0" right="0" top="60" name="humidity"  string="'Relative Humidity: loading'">
            <style font="bold 20px" color="blue" />
            <behavior>
                <method id="onHumValueChanged" params="content, result"><![CDATA[
                      content.string = "Relative Humidity: " + result.RHData+'%';
				]]></method>
            </behavior>
             </label>
        </container>
  
  <!-- ++++++++++++++控制按钮+++++++++++++++++++++ -->
         <container top="170" left="100" bottom="40" right="100" skin="ButtonSkin" active="true">
            <label top="0" left="0" bottom="0" right="0" 
            	string="' '" style="ButtonStyle"/>    
            <behavior>
                <method id="onTouchBegan" params="container, id, x, y, ticks"><![CDATA[
                    container.skin = ButtonSkinPressed;
                    
                    /* Turn starter on/off and switch the button's label */
                    if (rackState) {
                    	//sends new message to rack object's 'turnOff' method.
            			application.distribute( "clicked", "ON" );               
                		container.first.string = "收衣";
                	} else {
            			application.distribute( "clicked", "OFF" );
                		container.first.string = "晒衣";
                	}
                   rackState = !rackState; 	                    
                ]]></method>
                <method id="onTouchEnded" params="container, id, x, y, ticks"><![CDATA[
                    container.skin = ButtonSkin;	                      
                ]]></method>
            </behavior>       
        </container>
    </container>
    
    
	   

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- MODEL -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<script><![CDATA[
		var rackState = false;
		
	    var model = application.behavior = new ApplicationBehavior();
		application.add( new MainContainer( {} ) );
		 
		var Server = function( discovery ) {
			this.location = discovery.url;
			this.type = discovery.id;
			this.uuid = discovery.uuid;
			this.name = "- Untitstarter -";
			this.port = undefined;
		};
		Server.prototype = Object.create( Object.prototype, {
			location: { value: undefined, enumerable: true, writable: true },
			type: { value: undefined, enumerable: true, writable: true },
			uuid: { value: undefined, enumerable: true, writable: true },
			name: { value: undefined, enumerable: true, writable: true },
			port: { value: undefined, enumerable: true, writable: true },
			url: { value: undefined, enumerable: true, writable: true },
			conn: { value: undefined, enumerable: true, writable: true },
			createMessage: { value:
				function( name, query ) {
					var url = this.location + name;
					if ( query )
						url += "?" + serializeQuery( query );
					return new Message( url );
				}
			},
			update: { value:
				function( json ) {
					this.name = json.name;
					this.port = json.port;
					
					this.url = 'ws:' + this.location.split( ':' )[ 1 ] + ':' + this.port;
				}
			}
		});
	]]></script>
</program>