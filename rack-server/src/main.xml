<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- STYLES -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <skin id="MainSkin" color="#F0F0F0"/>
	<style id="titleStyle" font="36px" color="black" align="center,middle"/>
	<style id="headerStyle" font="bold 25px" color="#444" align="center,middle"/>
	
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- HANDLERS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
	<handler path="/info">
		<behavior>
			<method id="onInvoke" params="handler, message"><![CDATA[
				message.responseText = JSON.stringify( { port: serverPort, name: serverName, rackState: rackState } ); 
			]]></method>
		</behavior>
	</handler>
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- HANDLERS2 -->
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <handler path="/gotAnalogResult">
        <behavior><![CDATA[
        	function onInvoke( handler, message ){
        		
        		var result = message.requestObject;//data from bll(sensor)
        		envData.TData=result.TData;//data which sened to server
        		envData.RHData=result.RHData;        		
        	    application.distribute( "Sendtoclient", result ); 	
        		application.distribute( "onTemValueChanged", result ); 	
        		application.distribute( "onHumValueChanged", result );
        		application.distribute( "rackStateChanged", result );	
        		}  
        ]]></behavior>
    </handler>
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!--  web  handler-->
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <handler path="/envData">
    	<behavior>
    		<method id="onInvoke" params="handler,message"><![CDATA[
    		    message.status = 200;
    			message.responseText=JSON.stringify(envData);
    		    message.setResponseHeader("Content-Type", "application/json");
    		]]>
    		</method>
    	</behavior>
    </handler>
    <handler path="/StateCtl">
    	<behavior>
    		<method id="onInvoke" params="handler,message"><![CDATA[
        if (message.method == "GET") {
            message.setResponseHeader("Content-Type", "application/json");
            message.responseText = message.query;   
            if(message.responseText=="state=1")
            { trace("1"); 
               application.distribute( "STRETCH" );
            }else { 
            trace("0"); 
            application.distribute( "FOLD" );}      
             }
        else {
             message.status = 405; // method not allowed
          }
          ]]></method>
    	</behavior>
    </handler>
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- app BEHAVIORS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ --> 
	<behavior id="ApplicationBehavior">
		<method id="onLaunch" params="application"><![CDATA[
		   application.shared = true;
		]]></method>
		<method id="onQuit" params="application"><![CDATA[
		   application.shared = false;
		]]></method>		
		<method id="FOLD" params="container"><![CDATA[		 
           application.invoke(new MessageWithObject("pins:/motor/rackaction_on" ));  // Change control sign in bll				
        ]]></method>        
        <method id="STRETCH" params="container"><![CDATA[      
           application.invoke(new MessageWithObject("pins:/motor/rackaction_on" ));  // Change control sign in bll				
        ]]></method>         
		<method id="auto" params="container"><![CDATA[       
           application.invoke(new MessageWithObject("pins:/motor/modestate_on" ));   // Change modestate sign in bll 				
        ]]></method>  	        	        
		<method id="Manual" params="container"><![CDATA[       
           application.invoke(new MessageWithObject("pins:/motor/modestate_off" ));   // Change modestate sign in bll 	       				
        ]]></method>  		  		        				        
        <method id="Sendtoclient" params="container, result"><![CDATA[            
            SendData="T"+result.TData+"H"+result.RHData+"S"+result.H_flag;      //Data type conversion
			for ( i = 0; i < clients.length; i++ ) {			
				clients[ i ].send( SendData);              //send data to clients
			}		
        ]]></method>
          
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- web BEHAVIORS-->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
        
       <method id="onInvoke" params="application, message"><![CDATA[
			var path = message.path;
			var scheme = message.scheme.toLowerCase();
			var method = message.method.toLowerCase();			
			var action;
			if (scheme in this.sitemap) {
				var schemeHandlers = this.sitemap[scheme];
				if (method in schemeHandlers) {
					var methodHandlers = schemeHandlers[method];
					if (path in methodHandlers.item) {
						action = methodHandlers.item[path].action;
					}
				}
			}
			if (!action)
				action = "doDefaultAction";
			application.delegate(action, message);
		
		]]></method>
        <method id="doIndexAction" params="application, message"><![CDATA[
            message.status = 200;
            message.responseText = Files.readText(mergeURI(application.url, this.root + "/index.html")).replace("[SERVER]", this.server);
            message.setResponseHeader("Content-Type", "text/html");
 		]]></method>
        <method id="doLogAction" params="application, message"><![CDATA[
            message.status = 200;
            var query = parseQuery(message.requestText);
            application.distribute("onLogTextColorChange", query.color);
		]]></method>
        <method id="doDefaultAction" params="application, message"><![CDATA[
			var path = message.path;
			var uri = mergeURI(application.url, this.root + path);
			if (Files.exists(uri)) {
                message.status = 200;
                var mime = this.pathToMIME(path);
				message.setResponseHeader("Content-Type", mime);
                if (0 == mime.indexOf("text/"))
					message.responseText = Files.readText(uri);
				else {
					message.responseChunk = Files.readChunk(uri);
            		message.setResponseHeader("Content-Length", message.responseChunk.length);
				}
			}
			else {
                message.status = 404;
                var html = Files.readText(mergeURI(application.url, this.root + "/error.html")).replace("[SERVER]", this.server);
                message.responseText = html;
                message.setResponseHeader("Content-Type", "text/html");
			}
		]]></method>
        <method id="getExtension" params="path"><![CDATA[
			var extension = "";
			try {
				var dot = path.lastIndexOf(".");
				if (dot > 0)
					extension = path.slice(dot + 1).toLowerCase();
			}
			catch(e) {
			}
			return extension;
		]]></method>
        <method id="pathToMIME" params="path"><![CDATA[
			var extension = this.getExtension(path);
			switch(extension) {
				case 'htm':
				case 'html':
					return "text/html";
				case 'png':
					return "image/png";
				case 'jpg':
				case 'jpeg':
					return "image/jpeg";
				default:
					return "application/octet-stream";
			}
		]]></method>        
	</behavior>
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- LAYOUTS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
   <container id="MainContainer" top="0" left="0" bottom="0" right="0"  skin="MainSkin">
        <label top="10" left="0" right="0" string="$.title" style="headerStyle"/> 
    <container top="40" left="0" bottom="0" right="0" skin="MainSkin" >
        <label left="15" right="0" top="40" name="temperature" string="'waiting loading'">
            <style font="30px" color="black" />
            <behavior>
                <method id="onTemValueChanged" params="content, result"><![CDATA[
                      content.string = "Temperature:" + result.TData+" Â°c";
				]]></method>
            </behavior>
        </label>
        <label left="15" right="0" top="100" name="humidity" string="'waiting loading'">
            <style font="30px" color="black" />
            <behavior>
                <method id="onHumValueChanged" params="content, result"><![CDATA[
                      content.string = "Humidity:    " + result.RHData+"  %";  
				]]></method>
            </behavior>
        </label>
         <label left="15" right="0" top="160" name="State" string="'waiting loading'">
            <style font="30px" color="black" />
            <behavior>//change rackState including to the result from bll
                <method id="rackStateChanged" params="content, result"><![CDATA[
                     if(result.H_flag=="1"){
                      content.string = "RackState:  " + "FOLD";  
                      }else{
                      content.string = "RackState:  "+ "STRETCH";}                    
				]]></method>
            </behavior>
        </label>
      </container>
    </container>
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- MODEL -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<script><![CDATA[
		var rackState = false;
		var Rstate=false;
		var SendData=0;
				
		application.behavior = new ApplicationBehavior();
		//Initialize bll with starter.
        application.invoke(new MessageWithObject( "pins:configure", {
		    motor: {
		        require: "stepping_motor",
		        pins: {
		            motor_DIR: {pin: 6},
		            motor_ENA: {pin: 4},
		            motor_PWM: {pin: 28},
		            dht11: { rx: 33, tx: 31 },
					arrive_FWD: {pin: 51 },
					arrive_CW: {pin:52 },
					light_sensor: {pin:53 }	            
		        }
		    }}) , Message.JSON);
		/* Use the initialized analogSensor object and repeatedly 
    	   call its read method with a given interval.  */
    	application.invoke(new MessageWithObject("pins:/motor/motor_PWM_turnon"));	
		application.invoke( new MessageWithObject( "pins:/motor/control_motor?repeat=on&callback=/gotAnalogResult&interval=500"));
      
		var clients = [];
		var serverPort = 9300; 
		var serverName = "Server #" + serverPort;
	
		var server = new WebSocketServer( serverPort );
		server.onlaunch = function() {
		};
		server.onconnect = function(conn, options) {
			clients.push( conn );
			
			conn.onopen = function() {
			};
	
			conn.onmessage = function( e ) {
		
				application.distribute( e.data );
			};
	
			conn.onclose = function( e ) {	
				clients.splice( clients.indexOf(this), 1 );
			};  
	
			conn.onerror = function( e ) {
				conn.close();
			};
		};
		
		 var data = {
              title: 'Smart Home',
        };
		application.add( new MainContainer( data ) );
	
	/*.................web server...................*/	    
	    var envData={};
		var model = application.behavior = new ApplicationBehavior();
		model.root = "httpdocs";
		model.server = "";	
		application.shared = true;	// enable server			    
		model.sitemap = {
			http: {
				get: {
					item: {
						"/":							{ action: "doIndexAction" },
						"/envData":					    { action: "doenvDataAction" }
				
					      },
				     },
				post: {
					item: {
						"/log":							{ action: "doLogAction" },
					      },
				      }
			       }
		      };	 
	]]></script>
</program>