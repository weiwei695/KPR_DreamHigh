<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<module xmlns="http://www.kinoma.com/kpr/1">

	<require path="PinsSimulators" id="PinsSimulators"/>

	<function id="configure" params="configuration"><![CDATA[
		
		this.pinsSimulator = shell.delegate("addSimulatorPart", {
			header : { 
				label : "Camera", 
				name : "Serial Camera", 
				iconVariant : PinsSimulators.SENSOR_MODULE 
			},
			axes : [
				new PinsSimulators.FloatAxisDescription(
					{
						ioType : "output",
						valueLabel : "Compression",
						valueID : "compression"
					}
				),
				new PinsSimulators.FloatAxisDescription(
					{
						ioType : "output",
						valueLabel : "Width",
						valueID : "width"
					}
				),
				new PinsSimulators.FloatAxisDescription(
					{
						ioType : "output",
						valueLabel : "Height",
						valueID : "height"
					}
				),
			]
		});
		this.pinsSimulator.add(new ImageMaker);
	]]></function>

	<function id="close"><![CDATA[
		shell.delegate("removeSimulatorPart", this.pinsSimulator);
	]]></function>

	<function id="setCompression" params="value"><![CDATA[
		this.pinsSimulator.delegate("setValue", "compression", value);
		gCompression = value;
	]]></function>

	<function id="setImageSize" params="size"><![CDATA[
		this.pinsSimulator.delegate("setValue", "width", size.w);
		this.pinsSimulator.delegate("setValue", "height", size.h);
		gWidth = size.w;
		gHeight = size.h;
	]]></function>

	<function id="capture"><![CDATA[
		if (!gReady) return;
		var chunk = gChunks[gChunkIndex];
		if (++gChunkIndex == 3)
			gChunkIndex = 0;
		return chunk;
	]]></function>

	<texture id="photo1Texture" small="1.jpg"/>
	<skin id="photo1Skin" texture="photo1Texture" x="0" y="0" width="292" height="386"/>
	<texture id="photo2Texture" small="2.jpg"/>
	<skin id="photo2Skin" texture="photo2Texture" x="0" y="0" width="310" height="310"/>
	<texture id="photo3Texture" small="3.jpg"/>
	<skin id="photo3Skin" texture="photo3Texture" x="0" y="0" width="366" height="512"/>
	
	<handler path="/capture-jpeg">
		<behavior>
			<method id="onInvoke" params="handler, message">
				var container;
				if (0 == gChunks.length)
					container = new Container({width: photo1Skin.width, height: photo1Skin.height, skin: photo1Skin});
				else if (1 == gChunks.length)
					container = new Container({width: photo2Skin.width, height: photo2Skin.height, skin: photo2Skin});
				else if (2 == gChunks.length)
					container = new Container({width: photo3Skin.width, height: photo3Skin.height, skin: photo3Skin});
					
				shell.add(container);
				var layer = new Layer(null, true, true);
				layer.attach(container);

				layer.setResponseJPEG(message);
				
				layer.detach();
				shell.remove(container);
			</method>
		</behavior>
	</handler>

	<content id="ImageMaker">
		<behavior>
			<method id="onCreate" params="content, data">
				this.index = 0;
			</method>
			<method id="onDisplayed" params="content, data">
				content.invoke( new Message("/capture-jpeg"), Message.CHUNK);
			</method>
			<method id="onComplete" params="content, message, chunk">
				Files.writeChunk(mergeURI(Files.documentsDirectory, this.index + ".jpg"), chunk);
				gChunks.push(chunk);
				++this.index;
				if (3 == this.index)
					gReady = true;
				else
					content.invoke(new Message("/capture-jpeg"), Message.CHUNK);
			</method>
		</behavior>
	</content>

	<script><![CDATA[
		exports.pins = {
			serial: {type: "Serial", baud: 38400  }
		};
		var gWidth = 320, gHeight = 240;
		var gReady = false;
		var gCompression = 0;
		var gChunks = [];
		var gChunkIndex = 0;
	]]></script>

</module>