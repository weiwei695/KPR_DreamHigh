<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">


<!--
  This is the client side for Digital-rack-Websockets, a remote rack switch for the server.
  Intended for use as a phone or desktop companion app with the Kinoma Create.  
-->

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- ASSETS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<skin id="MainSkin" color="#F0F0F0"/>
	<skin id="ButtonSkin" color="blue"/>
	<skin id="ButtonSkinPressed" color="red"/>
	<skin id="MODESkin" color="#ffe600"/>
	<skin id= "offSkin" color="#00FFFFFF"/>
	<skin id= "pressedSkin" color="#B0FFFFFF"/>
	<skin id= "onSkin" color="#D9FFFFFF" /> 	
<style id="ButtonStyle" color="white" font="bold 20px Helvetica, sans-serif" align="center,middle"/>
<style id="CheckStyle" color="white" font="bold 11px Helvetica, sans-serif" align="center,middle"/>
<style id="headerStyle" font="bold 18px" color="#444" align="center,middle"/>
	

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- HANDLERS -->
<!-- +++++++++++发现服务器与清除服务器++++++++++++++++++ -->
    	
	<handler path="/discover">
		<behavior>
			<method id="onComplete" params="container, message, json"><![CDATA[
				//Recieves and stores server info and changes rack switch to match server's state. 
				var query = parseQuery( message.query );
				var server = model.getServer( query.uuid );
				server.update( json );
				server.conn = model.doConnect( server.url );
				application.distribute( json.rackState );
			]]></method>
			<method id="onInvoke" params="handler, message"><![CDATA[
				//Uses SSDP to find and connect to available servers.
				//Then opens a Websocket with each server.
				var discovery = JSON.parse( message.requestText );
				var serversTable = model.getServersTable();
				var uuid = discovery.uuid;
				if ( !( uuid in serversTable ) ) {
					var server = new Server( discovery );
					var message = server.createMessage( "info", { uuid: server.uuid } );
					handler.invoke( message, Message.JSON );
					serversTable[ server.uuid ] = server;
				}
			]]></method>
		</behavior>
	</handler>

	<handler path="/forget">
		<behavior>
			<method id="onInvoke" params="handler, message"><![CDATA[
				//Removes a disconnected server from the serversTable.
				var discovery = JSON.parse( message.requestText );
				var serversTable = model.getServersTable();
				var uuid = discovery.uuid;
				if ( uuid in serversTable ) {
					delete serversTable[ uuid ];
				}
			]]></method>
		</behavior>
	</handler>


<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- BEHAVIORS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
	<behavior id="ApplicationBehavior">
		<method id="onLaunch" params="application"><![CDATA[
			application.discover( "rackserver.Dream" );
			application.shared = true;
			this.serversTable = {};
			 application.distribute( "Modeinit");
			 application.distribute( "stateinit");
			 
		]]></method>
		<method id="onQuit" params="application"><![CDATA[
			var serversTable = this.serversTable;
			for ( var uuid in serversTable ) {
				var server = serversTable[ uuid ];
				server.conn.close();
			}		
			application.forget( "rackserver.Dream" );
			application.shared = false;
		]]></method>
		
		<method id="doConnect" params="url"><![CDATA[
			var conn = new WebSocket( url );
			conn.onopen = function() {
			};
			conn.onmessage = function( e ) {
				str=e.data.toString();							
				TValue=str.substring(str.indexOf("T")+1,str.indexOf("H")); 
				HValue=str.substring(str.indexOf("H")+1,str.indexOf("S"));
				State=str.substring(str.indexOf("S")+1,);				
				application.distribute( "TemValue",TValue);
				application.distribute( "HumValue",HValue);		
		     //change state following the bll
	         if(rackState!=State){
		          rackState=State;
		     	 application.distribute( "stateinit",rackState);    
		     	 }			   
			  };             
			conn.onclose = function() {
			};
			conn.onerror = function( e ) {
			};			
			return conn;			        
        ]]></method> 
        <method id="clicked" params="content, action"><![CDATA[
			var serversTable = this.serversTable;
			for ( var uuid in serversTable ) {
				var server = serversTable[ uuid ];
				server.conn.send( action);
			}				
		//	trace(rackState);
		]]></method>
		<method id="getServer" params="uuid"><![CDATA[
			return this.serversTable[ uuid ];
		]]></method>
		<method id="getServersTable" params=""><![CDATA[
			return this.serversTable;
		]]></method>
	</behavior>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- LAYOUTS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
	
    <container id="MainContainer" top="0" left="0" bottom="0" right="0" skin="MainSkin"> 	
         <label top="10" left="0" right="0" string="$.title" style="headerStyle"/> 
  <!-- ++++++++++++++Temperature and humidity display+++++++++++++++++++++ -->
       <container top="100" left="20" bottom="330" right="20" skin="MainSkin" active="true">
           <label left="0" right="0" top="10" name="temperature"  string="'Temperature: loading'">
             <style font="bold 20px" color="blue" align="center,middle" />
               <behavior>
                <method id="TemValue" params="content, result"><![CDATA[
                      content.string = "Temperature: " + result + '  °c';
				]]></method>
               </behavior>
          </label>
          <label left="0" right="0" top="60" name="humidity"  string="'Relative Humidity: loading'">
             <style font="bold 20px" color="blue"  align="center,middle"/>
               <behavior>
                 <method id="HumValue" params="content, result"><![CDATA[
                      content.string = "Relative Humidity: " + result+'  %';
				 ]]></method>
            </behavior>
          </label>
        </container>

   <!-- ++++++++++++++Mode switch+++++++++++++++++++++ -->

    <container top="200" left="115" bottom="300" right="115" skin="ButtonSkin" active="true">
	 <label top="0" left="0" bottom="0" right="0" string="' '" style="CheckStyle"/>    
            <behavior>
              <method id="Modeinit" params="container, id, x, y, ticks"><![CDATA[                      
                     if (modestate==true) {           
                		container.first.string = "Automatic mode";
                		 container.skin = ButtonSkinPressed;
                	} else {
                		container.first.string = "Manual mode";
                		  container.skin = ButtonSkin;
                	}
               ]]></method>  
               //changing Mode button's string according to the modestate           
             <method id="onTouchBegan" params="container, id, x, y, ticks"><![CDATA[                
                     modestate= !modestate ;
                    if (modestate) {                    
                	    container.first.string = "Automatic mode";
                	    container.skin = ButtonSkinPressed;
                	    application.distribute( "clicked", "auto");
                	} else {                
                		container.first.string = "Manual mode";
                		container.skin = ButtonSkin;
                		application.distribute( "clicked", "Manual");
                	}                 	                    
                ]]></method>
                <method id="onTouchEnded" params="container, id, x, y, ticks"><![CDATA[
                  application.distribute( "clicked", modestate);	                      
                ]]></method>
            </behavior>   
        </container>
  <!-- ++++++++++++++Control button switch+++++++++++++++++++++ -->
         <container top="300" left="100" bottom="200" right="100" skin="ButtonSkin" active="true">
            <label top="0" left="0" bottom="0" right="0" string="' '" style="ButtonStyle"/>    
            <behavior>
              <method id="stateinit" params="container, rackState"><![CDATA[
                    container.skin = MODESkin;
                     if (rackState=="1") {           
                		container.first.string = "STRETCH";
                	} else {
                		container.first.string = "FOLD";
                	}               	
               ]]></method>
               //changing Control button's string every time onTouchBegan
             <method id="onTouchBegan" params="container, id, x, y, ticks"><![CDATA[
                    container.skin = ButtonSkinPressed;       
                    if (container.first.string == "STRETCH") {                    
            			application.distribute( "clicked", "FOLD");         
                		container.first.string = "FOLD";                		
                	} else {               	
            			application.distribute( "clicked", "STRETCH");
                		container.first.string = "STRETCH";              	
                	}                            
                ]]></method>
                <method id="onTouchEnded" params="container, id, x, y, ticks"><![CDATA[
                    container.skin = ButtonSkin;	                            
                ]]></method>                        
            </behavior>       
         </container>  
    </container>
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- MODEL -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<script><![CDATA[
		var rackState=false;
		var modestate=true;
		var str=0;
		var TValue=0; 
		var HValue=0;
		var State=0;
		
	   var model = application.behavior = new ApplicationBehavior();
       var data = {
              title: 'Smart Home',
        };
		application.add( new MainContainer( data ) );
		 
		var Server = function( discovery ) {
			this.location = discovery.url;
			this.type = discovery.id;
			this.uuid = discovery.uuid;
			this.name = "- Untitstarter -";
			this.port = undefined;
		};
		Server.prototype = Object.create( Object.prototype, {
			location: { value: undefined, enumerable: true, writable: true },
			type: { value: undefined, enumerable: true, writable: true },
			uuid: { value: undefined, enumerable: true, writable: true },
			name: { value: undefined, enumerable: true, writable: true },
			port: { value: undefined, enumerable: true, writable: true },
			url: { value: undefined, enumerable: true, writable: true },
			conn: { value: undefined, enumerable: true, writable: true },
			createMessage: { value:
				function( name, query ) {
					var url = this.location + name;
					if ( query )
						url += "?" + serializeQuery( query );
					return new Message( url );
				}
			},
			update: { value:
				function( json ) {
					this.name = json.name;
					this.port = json.port;
					
					this.url = 'ws:' + this.location.split( ':' )[ 1 ] + ':' + this.port;
				}
			}
		});
	
	]]></script>
	  
</program>