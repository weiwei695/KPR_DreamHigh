<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">
    <require path="mobile/model" id="MODEL"/>
    <require path="mobile/control" id="CONTROL"/>

    <skin id="sknGray" color="#757575"/>
    <skin id="sknDarkGray" color="#303030"/>
    <skin id="sknLightGray" color="#eee"/>

    <skin id="buttonSkin">
        <states colors="#ccc,#FFC48A,#FFA64D"/>
    </skin>
    <style id="buttonLabelStyle" font="24px bold Arial" color="black"/>

    <skin id="sknWhite" color="#fff"/>
    <style id="em" font="36px bold Arial" color="black"/>
    <style id="titleStyle" font="24px" color="black" align="center,middle"/>
    <style id="errorStyle" font="14px" color="red" align="center,middle"/>
    
    <!-- MODEL -->

    <!-- Main Container -->
    <container left="0" right="0" top="0" bottom="0" id="Menu" skin="sknLightGray">
        <column width="400">
            <text style="errorStyle" height="80" left="0" right="0"/>

            <container left="0" right="0" height="80" active="true" skin="buttonSkin">
                <behavior like="CONTROL.ButtonBehavior"><![CDATA[
                    function onTap(container) {
                        container.invoke(new Message("/twitter/start"));
                    }
                ]]></behavior>
                <label string="'Twitter (OAuth 1.0a)'" style="buttonLabelStyle"/>
            </container>

            <container left="0" right="0" height="80" top="10" active="true" skin="buttonSkin">
                <behavior like="CONTROL.ButtonBehavior"><![CDATA[
                    function onTap(container) {
                        container.invoke(new Message("/google/start"));
                    }
                ]]></behavior>
                <label string="'Google (OAuth 2.0)'" style="buttonLabelStyle"/>
            </container>
        </column>
    </container>

    <!-- OAuth behavior -->
    <behavior id="OAuthBrowserBehavior">
    </behavior>

    <!-- OAuth web view container -->
    <container left="0" right="0" top="0" bottom="0" skin="sknDarkGray" id="AuthenticatePane">
        <browser left="0" right="0" top="0" bottom="70" url="$.url" anchor="BROWSER">
            <behavior><![CDATA[
                function onCreate(browser, data) {
                    this.data = data;
                }

                function onLoaded(browser) {
                    if (browser.canBack) {
                        this.data.BACK.visible = true;
                    } else {
                        this.data.BACK.visible = false;
                    }
                }

                function onInvoke(browser, message) {
                    if (this.data.isActionMessage(message)) {
                        message.cancel();

                        var action = this.data.action + '?' + message.query;
                        browser.invoke(new Message(action));
                        
                        application.remove(application.last);
	                }
                }
            ]]></behavior>
        </browser>

        <container left="10" right="10" bottom="10" height="50" skin="buttonSkin" active="true">
            <behavior like="CONTROL.ButtonBehavior"><![CDATA[
                function onTap(container) {
                    container.invoke(new Message("/startover"));
                }
            ]]></behavior>
            <label string="'Dismiss'" style="buttonLabelStyle"/>
        </container>

        <container left="10" width="50" bottom="10" height="50" skin="sknLightGray" active="true" visible="false" anchor="BACK">
            <behavior like="CONTROL.ButtonBehavior"><![CDATA[
                function onTap(container) {
                    var browser = this.data.BROWSER;
                    browser.back();
                }
            ]]></behavior>
            <label string="'Back'" style="buttonLabelStyle"/>
        </container>
    </container>

    <!-- Twitter user view -->
    <container left="0" right="0" top="0" bottom="0" skin="sknWhite" id="UserPane">
        <column>
            <label style="em" string="'Nice to meet you'"/>
            <picture width="128" height="128" url="$.image"/>
            <label style="em" string="$.name"/>
        </column>
        <container left="10" right="10" bottom="10" height="50" skin="buttonSkin" active="true">
            <behavior like="CONTROL.ButtonBehavior"><![CDATA[
                function onTap(container) {
                    container.invoke(new Message("/startover"));
                }
            ]]></behavior>
            <label string="'Try Again'" style="buttonLabelStyle"/>
        </container>
    </container>

    <container id="ErrorContainer" left="0" right="0" top="0" bottom="0" skin="sknLightGray" style="errorStyle">
        <column>
            <label string="'Bad news.'"/>
            <label string="'Browser is not supported in your platform.'"/>
            <label string="$.platform" style="titleStyle"/>
        </column>
    </container>

    <script><![CDATA[
        // session will keep information for fetching access token.
        var session = {}, container;

        if (["mac", "android", "iphone"].indexOf(system.platform) < 0) {
            container = new ErrorContainer({ platform: system.platform });
        } else {
            container = new Menu();
        }
        
        application.add(container);

        function setMessage(msg) {
            application.last.first.first.string = msg;
        }
    ]]></script>

    <handler path="/startover">
        <behavior like="MODEL.CommandBehavior"><![CDATA[
            function onQuery(handler, query) {
                session = {};
                application.remove(application.last);
                application.add(new Menu());
            }
        ]]></behavior>
    </handler>

    <!-- Twitter API via OAuth 1.0a -->

    <require path="./twitter" id="TWITTER"/>

    <handler path="/twitter/start">
        <behavior like="MODEL.CommandBehavior"><![CDATA[
            function onQuery(handler, query) {
                if (!TWITTER.checkCredentialsValid()) {
                    setMessage("This example requires the 'CONSUMER_KEY' and 'CONSUMER_SECRET' variables in twitter.xml file set to a valid client id and secret. See Twitter Developer Site.");
                    return;
                }

                application.remove(application.last);

                // Step 1. Fetching request token
                var message = TWITTER.fetchRequestTokenMessage();
                handler.invoke(message, Message.TEXT);
            }

            function onResponse(handler, query, message, response) {
                // Step 2. Store request token inside session
                TWITTER.gotRequestToken(session, response);

                // Step 3. Prepare inline web view for user authorization.
                var data = {
                    url: TWITTER.authorizePageUrl(session),
                    isActionMessage: function(message) {
                        return (message.scheme == 'kinoma');
                    },
                    action: "/twitter/authorized",
                };
                var pane = new AuthenticatePane(data);

                // Step 4. Display web view to user.
                application.add(pane);
            }

            function onError(handler, query, message, result) {
                debugger;
            }
        ]]></behavior>
    </handler>

    <handler path="/twitter/authorized">
        <behavior like="MODEL.CommandBehavior"><![CDATA[
            function onQuery(handler, query) {
                // Step 5. The user granted me to see tweets.

                var authorized = TWITTER.gotAuthorizeResponse(session, query);
                if (authorized) {
                    // Step 5a. The user granted me to see tweets.
                    trace("Authorization granted. Go on.\n");
                    handler.invoke(new Message("/twitter/fetchAccessToken"));
                } else {
                    // Step 5b. The user denied.
                    trace("Authorization denied.\n");
                }
            }
        ]]></behavior>
    </handler>

    <handler path="/twitter/fetchAccessToken">
        <behavior like="MODEL.CommandBehavior"><![CDATA[
            function onQuery(handler, query) {
                // Step 6. Fetching access token
                var message = TWITTER.fetchAccessTokenMessage(session);
                handler.invoke(message, Message.TEXT);
            }

            function onResponse(handler, query, message, response) {
                // Step 7. Got access token
                var accessToken = TWITTER.gotAccessToken(response);

                // Optional. 
                handler.invoke(new Message("/twitter/fetchUserInfo?" + serializeQuery(accessToken)));
            }

            function onError(handler, query, message, result) {
                debugger;
            }
        ]]></behavior>
    </handler>

    <handler path="/twitter/fetchUserInfo">
        <behavior like="MODEL.CommandBehavior"><![CDATA[
            function onQuery(handler, query) {
                // Step 1. Fetching user info. Access token is passed by query string
                var message = TWITTER.userInfoMessage(query);
                handler.invoke(message, Message.JSON);
            }

            function onResponse(handler, query, message, response) {
                // Step 2. Got access user info

                var data = {
                    image: response.profile_image_url,
                    name: response.name,
                };

                application.add(new UserPane(data));
            }

            function onError(handler, query, message, result) {
                debugger;
            }
        ]]></behavior>
    </handler>

    <!-- Google API via OAuth 2.0 -->

    <require path="./google" id="GOOGLE"/>

    <handler path="/google/start">
        <behavior like="MODEL.CommandBehavior"><![CDATA[
            function onQuery(handler, query) {
                if (!GOOGLE.checkCredentialsValid()) {
                    setMessage("This example requires the 'CLIENT_ID' and 'CLIENT_SECRET' variables in google.xml file set to a valid client id and secret. See Google Developers Console.");
                    return;
                }

                application.remove(application.last);

                // Step 1. Display authentication web view to user.
                
                var scope = "https://www.googleapis.com/auth/plus.login";
                var url = GOOGLE.authenticationUrl(scope);

                var data = {
                    url: url,
                    isActionMessage: function(message) {
                        trace(message.url + "\n");
                        return GOOGLE.isRedirectUrl(message);
                    },
                    action: "/google/authorized"
                };
                var pane = new AuthenticatePane(data);

                application.add(pane);
            }
        ]]></behavior>
    </handler>
    <handler path="/google/authorized">
        <behavior like="MODEL.CommandBehavior"><![CDATA[
            function onQuery(handler, query) {
                // Step 2. The user granted me to see info.

                if ('code' in query) {
                    // Step 2a. The user granted.
                    trace("Authorization granted. Go on.\n");

                    // Step 3. Access to exchange authorization code and access token.
                    var message = GOOGLE.accessTokenMessage(query.code);

                    handler.invoke(message, Message.TEXT);
                } else {
                    // Step 2b. The user denied.
                    trace("Authorization denied.\n");
                }
            }

            function onResponse(handler, query, message, response) {
                trace("Success: " + response + "\n");

                // Step 4. Got access token. Store info for later use.
                session = JSON.parse(response);

                // Optional
                handler.invoke(new Message("/google/userInfo"));
            }

            function onError(handler, query, message, response) {
                trace("Stetus: " + message.status + "\n");
                trace("Failed: " + response + "\n");
            }

        ]]></behavior>
    </handler>
    <handler path="/google/userInfo">
        <behavior like="MODEL.CommandBehavior"><![CDATA[
            function onQuery(handler, query) {
                // Example 1. To fetch the user info
                var url = 'https://www.googleapis.com/plus/v1/people/me?' + serializeQuery({
                    access_token: session.access_token
                });

                var message = new Message(url);
                handler.invoke(message, Message.JSON);
            }

            function onResponse(handler, query, message, response) {
                var data = {
                    image: response.image.url,
                    name: response.displayName,
                };

                application.add(new UserPane(data));
            }

            function onError(handler, query, message, result) {
                debugger;
            }
        ]]></behavior>
    </handler>
</program>
