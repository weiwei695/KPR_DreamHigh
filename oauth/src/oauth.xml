<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<module xmlns="http://www.kinoma.com/kpr/1">
	<script><![CDATA[

	var OAuth1Authorizer = function(consumer_key, consumer_secret) {
		this.consumer = {
			key: consumer_key,
			secret: consumer_secret
		};
	};

	OAuth1Authorizer.prototype = Object.create(Object.prototype, {
		authorize: { value: function(message, authorization, more) {
			var time = "" + Math.floor(Date.now() / 1000);
			var nonce = "" + Math.floor(1000000 * Math.random()) + time;

			this.authorizeWithTime(message, authorization, more, time, nonce);
		}},
		authorizeWithTime: { value: function(message, authorization, more, time, nonce) {
			var params = this.oauthParams(authorization, more, time, nonce);
			params.oauth_signature = this.sign(message, params, authorization);

			var DST = 'OAuth ' + Object.keys(params).sort().map(function(key) {
				return key + '="' + encodeURIComponentRFC3986(params[key]) + '"';
			}).join(', ');

			message.setRequestHeader("Authorization", DST);
		}},
		oauthParams: { value: function(authorization, more, time, nonce) {
			var params = {
				oauth_consumer_key: this.consumer.key,
				oauth_nonce: nonce,
				oauth_signature_method: "HMAC-SHA1",
				oauth_timestamp: time,
				oauth_version: "1.0"
			};

			if (more) {
				Object.keys(more).forEach(function(key) {
					params[key] = more[key];
				});
			}

			if (authorization && authorization.token) {
				params.oauth_token = authorization.token;
			}

			return params;
		}},
		sign: { value: function(message, params, authorization) {
			var query = message.query ? message.query.split('&') : [];
			var body = message.requestText ? message.requestText.split('&') : [];

			var seeds = query.concat(body, Object.keys(params).map(function(key) {
				return key + '=' + encodeURIComponentRFC3986(params[key]);
			})).sort().join('&');

			var url = message.url.split('?')[0];

			var data = [
				message.method.toUpperCase(),
				encodeURIComponentRFC3986(url),
				encodeURIComponentRFC3986(seeds)
			].join('&');

			var signing_key = this.consumer.secret + '&';
			if (authorization && authorization.token_secret) {
				signing_key += authorization.token_secret;
			}

			var c= Crypt.SHA1;
			var hmac = new Crypt.HMAC(new Crypt.SHA1(), str2chunk(signing_key));
			return hmac.sign(data).toString();
		}}
	});

	var str2chunk = function(str) {
		var chunk = new Chunk(str.length);
		for (var i = 0, c = str.length; i < c; i++) {
			chunk.poke(i, str.charCodeAt(i));
		}
		return chunk;
	};

	var parseTokenResponse = function(response) {
		var result = parseQuery(response);
		if  (!('oauth_token' in result)) return null;
		if  (!('oauth_token_secret' in result)) return null;

		return {
			token: result.oauth_token,
			token_secret: result.oauth_token_secret
		};
	}

	// exports
	exports.OAuth1 = {
		Authorizer: OAuth1Authorizer,
	};

	exports.parseTokenResponse = parseTokenResponse;

	]]></script>
</module>
