<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
  Shutter sound from Sound-e-Scape Studios:
  http://www.soundescapestudios.com/Sound-e-Scape-Studios-policy.html
-->
<program xmlns="http://www.kinoma.com/kpr/1">
	<require path="themes/sample/theme" id="THEME"/>
	<require path="mobile/control" id="CONTROL"/>
	<require path="mobile/model" id="MODEL"/>
	<require path="mobile/screen" id="SCREEN"/>
	<require path="transitions" id="TRANSITIONS"/>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- ASSETS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<skin id="blackSkin" color="black"/>
	<texture id="buttonTexture" small="assets/button.png"/>
	<skin id="buttonSkin" texture="buttonTexture" x="0" y="0" width="60" height="60">
	<tiles left="20" right="20" top="20" bottom="20"/>
		<states offset="60"/>
	</skin>
	<style id="labelStyle" font="18px" align="center,middle"/>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- HANDLERS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
	<handler path="/main">
		<behavior like="MODEL.ScreenBehavior">
			<method id="hasSelection" params="data, delta"><![CDATA[
				return false;
			]]></method>
			<method id="getSelection" params="data, delta"/>
			<method id="onDescribe" params="query, selection"><![CDATA[
				var data = {
					Screen: MainScreen,
					title: "Camera",
					uri_preview: mergeURI( application.url, "assets/preview.yuv" ),
					uri_capture: mergeURI( Files.picturesDirectory, application.di + ".photo.jpg")
				};
				return data;
			]]></method>
		</behavior>
	</handler>
	
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- BEHAVIORS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<behavior id="ApplicationBehavior" like="MODEL.ApplicationBehavior">
		<method id="onCreate" params="application, data"><![CDATA[
			MODEL.ApplicationBehavior.prototype.onCreate.call( this, application, data );
		]]></method>
		<method id="onLaunch" params="application"><![CDATA[
			this.width = application.width;
			MODEL.ApplicationBehavior.prototype.onLaunch.call( this, application );
		]]></method>
		<method id="onQuit" params="application"><![CDATA[
			MODEL.ApplicationBehavior.prototype.onQuit.call( this, application );
		]]></method>
		<method id="onAdapt" params="application"><![CDATA[
			var width = application.width;
			if ( this.width != width ) {
				this.width = width;
				application.distribute( "onDeviceOrientationChange" );
			}
		]]></method>	
	</behavior>
	
	<behavior id="CameraScreenBehavior">
		<method id="onCreate" params="container, data"><![CDATA[
			this.data = data;
			this.container = container;
			this.use_camera = ("linux" != system.platform);
			this.video_track = null;
			this.photo_track = null;
			this.reader = null;
			this.load();
		]]></method>
		<method id="onDisplaying" params="container"><![CDATA[
			this.reader.start();
			
			container.coordinates = { width: this.dimensions.width, height: this.dimensions.height };
			container.origin = { x: this.dimensions.width >> 1, y: this.dimensions.height >> 1 };
			this.onDeviceOrientationChange( container );
			
			if ( !this.use_camera ) {
				container.time = 0;
				container.interval = 16;
				container.start();
			}
		]]></method>
		<method id="onUndisplayed" params="container"><![CDATA[
			if ( this.reader ) {
				this.reader.stop();
				this.reader.close();
				this.reader = null;
			}
		]]></method>
		<method id="onLoaded" params="container"><![CDATA[
			this.onDeviceOrientationChange( container );
		]]></method>
		<method id="onDeviceOrientationChange" params="container"><![CDATA[
			var x_scale, y_scale;
			
			if ( application.width > application.height ) {
				x_scale = application.width / this.dimensions.width;
				y_scale = application.height / this.dimensions.height;
				container.rotation = 0;
			}
			else {
				x_scale = application.height / this.dimensions.width;
				y_scale = application.width / this.dimensions.height;
				container.rotation = 90;
			}
			
			var scale = x_scale > y_scale ? y_scale : x_scale;
			if ( container.scale.x != scale || container.scale.y != scale )
				container.scale = { x: scale, y: scale };
		]]></method>
		<method id="onTimeChanged" params="container"><![CDATA[
			this.onDataArrived( container );
		]]></method>
		<method id="onDataArrived" params="container"><![CDATA[
			this.refresh( container );
			return true;
		]]></method>
		<method id="onMediaDataArrived"><![CDATA[
			application.distribute( "onDataArrived" );
		]]></method>
		<method id="capture"><![CDATA[
			this.photo_track.set( FskMediaProperty.enabled, true );
		]]></method>
		<method id="load"><![CDATA[
			var mime, uri = "";
			if ( this.use_camera )
				mime = "video/x-kinoma-capture";
			else {
				var chunk = Files.readChunk( this.data.uri_preview );
				mime = FskMediaReader.canHandle( chunk );
				chunk.free();
				uri = this.data.uri_preview;
			}
			
			var reader = this.reader = new FskMediaReader( uri, mime );
			if ( !reader ) throw "Unable to create media reader";
			
			reader.container = this.container;
			reader.refresh   = this.refresh;
			reader.onMediaDataArrived = this.onMediaDataArrived;
			
			var track, trackIndex = 0;
			while ( track = reader.getTrack( trackIndex++ ) ) {
				var mediaType = track.get( FskMediaProperty.mediaType );
				if ( "video-preview" == mediaType )
					break;
			}
			if ( !track )
				throw "No video preview track";
			else
				this.video_preview_track = track;
			
			trackIndex = 0;
			while ( track = reader.getTrack( trackIndex++ ) ) {
				if ( "image" == track.get( FskMediaProperty.mediaType ) )
					break;
			}
			if ( !track )
				throw "No photo track";
			else
				this.photo_track = track;
			
			this.formatInfo = this.video_preview_track.get( FskMediaProperty.formatInfo );
			this.format = this.video_preview_track.get( FskMediaProperty.format );
			this.dimensions = this.video_preview_track.get( FskMediaProperty.dimensions );
		]]></method>
		<method id="refresh" params="container"><![CDATA[
			while ( true ) {
				var data = this.reader.extract();
				if ( !data || !data.info )
					break;
			
				if ( this.photo_track == data.track ) {
					this.photo_track.set( FskMediaProperty.enabled, false );
					container.bubble( "onPhotoCaptured", data.chunk );
					//data.chunk.free();
					continue;
				}
		
				var info = data.info[0];
				if ( ( 1 != info.samples ) || ( 1 != data.info.length ) )
					throw "Unexpected sample info";
				
				container.load( data.chunk, this.format, this.formatInfo );
				data.chunk.free();
				
				break;
			}
		]]></method>
	</behavior>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- MODEL -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<script><![CDATA[
		var model = application.behavior = new ApplicationBehavior( application );
		Sound.volume = 1.0;
	]]></script>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- LAYOUTS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<container id="PhotoContainer" left="0" right="0" top="0" bottom="0">
		<behavior>
			<method id="onCreate" params="container, data"><![CDATA[
				this.data = data;
			]]></method>
			<method id="onBack" params="container"><![CDATA[
				container.container.run( new TRANSITIONS.Flip(), container, new PreviewContainer( this.data ), { direction : "down", easeType : "sineEaseOut", duration : 500 } );
			]]></method>
		</behavior>
		<picture left="0" right="0" top="0" bottom="0">
			<behavior>
				<method id="onCreate" params="picture, data"><![CDATA[
					this.data = data;
					picture.load(data.chunk);
				]]></method>
				<method id="onLoaded" params="picture"><![CDATA[
					this.data.chunk.free();
				]]></method>
			</behavior>
		</picture>
		<container bottom="10" width="80" height="30" active="true" skin="buttonSkin">
			<behavior like="CONTROL.ButtonBehavior">
				<method id="onTap" params="button"><![CDATA[
					button.bubble( "onBack" );
				]]></method>
			</behavior>
			<label left="10" right="10" string="'Back'" style="labelStyle"/>
		</container>
	</container>

	<container id="PreviewContainer" left="0" right="0" top="0" bottom="0">
		<behavior>
			<method id="onCreate" params="container, data"><![CDATA[
				this.data = data;
			]]></method>
			<method id="onPhotoCaptured" params="container, chunk"><![CDATA[
				this.data.chunk = chunk;
				
				if (system.platform == "iphone" || system.platform == "android" || system.platform == "mac") {
					var message = new Message("xkpr://library/pictures/save");
					message.requestChunk = chunk;	// the JPEG photo chunk corresponding to the captured image
					message.method = "POST"
					container.invoke(message, Message.CHUNK);
				}
				else {
					Files.deleteFile( this.data.uri_capture );
					Files.writeChunk( this.data.uri_capture, chunk );
					container.wait( 100 );	// let the transition complete
				}				
			]]></method>
			<method id="onComplete" params="container"><![CDATA[
				container.container.run( new TRANSITIONS.Flip(), container, new PhotoContainer( this.data ), { direction : "up", easeType : "sineEaseOut", duration : 500 } );
			]]></method>
		</behavior>
		<picture anchor="PREVIEW" behavior="CameraScreenBehavior" left="0" right="320" top="0" bottom="0"/>
		<container anchor="MASK" left="0" right="0" top="0" bottom="0" skin="blackSkin" visible="false"/>
		<canvas anchor="SHUTTER" width="50" height="50" active="true">
			<behavior>
			<method id="onCreate" params="canvas, data"><![CDATA[
				this.data = data;
				this.pressed = false;
				this.radius = ( canvas.width >> 1 ) - 5;
				this.shutterSound = new Sound( mergeURI( application.url, "assets/shutter-02.wav" ) );
				this.onDeviceOrientationChange( canvas );
				this.draw( canvas );
			]]></method>
			<method id="onTouchBegan" params="canvas, id, x, y, ticks"><![CDATA[
				this.pressed = true;
				this.draw( canvas );
			]]></method>
			<method id="onTouchEnded" params="canvas, id, x, y, ticks"><![CDATA[
				this.pressed = false;
				this.draw( canvas );
				this.shutter( canvas );
			]]></method>
			<method id="onTouchCancelled" params="canvas, id, x, y, ticks"><![CDATA[
				this.pressed = false;
				this.draw( canvas );
			]]></method>
			<method id="draw" params="canvas"><![CDATA[
				var centerX = canvas.width >> 1;
				var centerY = canvas.height >> 1;
				var radius = this.radius;
				var ctx = canvas.getContext( "2d" );
				ctx.clearRect( 0, 0, canvas.width, canvas.height );
				ctx.beginPath();
				ctx.arc( centerX, centerY, radius, 0, 2 * Math.PI );
				ctx.closePath();
				ctx.lineWidth = 4;
				ctx.strokeStyle = 'white';
				ctx.stroke();
				if ( !this.pressed ) {
					radius -= 5;
					ctx.beginPath();
					ctx.arc( centerX, centerY, radius, 0, 2 * Math.PI );
					ctx.closePath();
					ctx.fillStyle = 'white';
					ctx.fill();
				}
			]]></method>
			<method id="shutter" params="canvas"><![CDATA[
				this.shutterSound.play();
				canvas.container.run( new ShutterOpenTransition, this.data.MASK );
				canvas.container.run( new ShutterCloseTransition, this.data.MASK );
				this.data.PREVIEW.delegate( "capture" );
			]]></method>
			<method id="onDeviceOrientationChange" params="canvas"><![CDATA[
				if ( application.width > application.height )
					canvas.coordinates = { right: 5, top: ( application.height >> 1 ) - ( canvas.height >> 1 ), width: canvas.width, height: canvas.height };
				else
					canvas.coordinates = { bottom: 5, left: ( application.width >> 1 ) - ( canvas.width >> 1 ), width: canvas.width, height: canvas.height };
			]]></method>
			</behavior>
		</canvas>
	</container>

	<container id="MainScreen" left="0" right="0" top="0" bottom="0" skin="blackSkin">
		<behavior>
			<method id="onCreate" params="container, data"><![CDATA[
				this.data = data;
				container.add( new PreviewContainer( data ) );
			]]></method>
		</behavior>
	</container>
		
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- TRANSITIONS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
	<transition id="ShutterOpenTransition" duration="30">
		<method id="onBegin" params="container, mask"><![CDATA[
			this.layer = new Layer;
			mask.visible = true;
			this.layer.attach( mask );
			this.layer.opacity = 0;
		]]></method>
		<method id="onEnd" params="container, mask"><![CDATA[
			this.layer.detach();
		]]></method>
		<method id="onStep" params="fraction"><![CDATA[
			this.layer.opacity = fraction;
		]]></method>
	</transition>
	<transition id="ShutterCloseTransition" duration="30">
		<method id="onBegin" params="container, mask"><![CDATA[
			this.layer = new Layer;
			this.layer.attach( mask );
			this.layer.opacity = 1;
		]]></method>
		<method id="onEnd" params="container, mask"><![CDATA[
			this.layer.detach();
			mask.visible = false;
		]]></method>
		<method id="onStep" params="fraction"><![CDATA[
			this.layer.opacity = 1 - fraction;
		]]></method>
	</transition>

</program>
