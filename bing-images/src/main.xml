<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<program xmlns="http://www.kinoma.com/kpr/1">
	<require path="themes/sample/theme" id="THEME"/>
	<require path="mobile/control" id="CONTROL"/>
	<require path="mobile/scroller" id="SCROLLER"/>
	<require path="mobile/transition" id="MTRANSITION"/>
	<require path="mobile/keyboard" id="KEYBOARD"/>
	<require path="mobile/dialog" id="DIALOG"/>
	<require path="mobile/model" id="MODEL"/>
	<require path="mobile/screen" id="SCREEN"/>
	<require path="mobile/tool" id="TOOL"/>
	
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- ASSETS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<texture id="applicationIconTexture" small="icon.png"/>
	<skin id="applicationIconSkin" texture="applicationIconTexture" x="0" y="0" width="80" height="80" aspect="fit"/>
	<skin id="blackSkin" color="black"/>

	<style id="errorStyle" font="bold 24px" color="white" align="center,middle"/>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- MODEL -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<script><![CDATA[
		var accountKey = "Your account key goes here";
		var accountURL = "https://api.datamarket.azure.com/Bing/Search/Image?";
		var model = application.behavior = new MODEL.ApplicationBehavior( application );
	]]></script>
	<variable id="displayHeaderFooter" value="true"/>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- HANDLERS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
	<handler path="/main">
		<behavior like="MODEL.ScreenBehavior">
			<method id="hasSelection" params="data, delta"><![CDATA[
				var selection = data.selection + delta;
				return ( 0 <= selection ) && ( selection < data.items.length );
			]]></method>
			<method id="getSelection" params="data, delta"><![CDATA[
				data.selection += delta;
				return data.items[ data.selection ];
			]]></method>
			<method id="onDescribe" params="query, selection"><![CDATA[
				if ( 0 == accountKey.indexOf( 'Your account key goes here' ) ) {
					return {
						Screen: ErrorScreen,
						selection: -1,
						message: "This example requires the 'accountKey' variable set to a valid Windows Azure Marketplace account key associated with a Bing Search API subscription."
					};
				}
				else {
					return {
						Screen: MainScreen,
						action: "/searchPhotos?what=",
						items: null,
						more: false,
						scroll: {
							x: 0,
							y: 0
						},
						selection: -1,
						what: "",
					};
				}
			]]></method>
		</behavior>
	</handler>

	<handler path="/searchPhotos">
		<behavior like="MODEL.CommandBehavior">
			<method id="onQuery" params="handler, query"><![CDATA[
				var data = this.context.data;
				var list = data.LIST;
				data.what = query.what;
				list.behavior.reload( list );
			]]></method>
		</behavior>
	</handler>
	
	<handler path="/photo">
		<behavior like="MODEL.ScreenBehavior">
			<method id="onDescribe" params="query, selection"><![CDATA[
				return {
					Screen: PhotoScreen,
					CloseTransition: ZoomOutTransition,
					OpenTransition: ZoomInTransition,
					pictureURL: selection.MediaUrl,
					thumbnailURL: selection.Thumbnail.MediaUrl,
					title: selection.Title,
				};
			]]></method>
		</behavior>
	</handler>
	
    <handler path="/alert">
        <behavior like="MODEL.DialogBehavior">
            <method id="onDescribe" params="query"><![CDATA[
                return {
                    Dialog: DIALOG.Box,
                    items: [
                        {
                            Item: DIALOG.Comment,
                            string: query.message
                        },
                    ],
                    ok: "OK"
                };
			]]></method>
        </behavior>
    </handler>
    
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- LAYOUTS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<variable id="thumbnailWidth" value="100"/>
	<container id="MainScreen" like="SCREEN.EmptyScreen" skin="blackSkin">
		<container anchor="BODY" like="SCREEN.EmptyBody">
			<scroller like="SCROLLER.VerticalScroller">
				<layout anchor="LIST" left="0" right="0" top="0" active="true" backgroundTouch="true">
					<behavior like="SCREEN.ListBehavior">
						<method id="addLines" params="list, items, more"><![CDATA[
							var c = Math.floor( application.width / thumbnailWidth );
							var width = Math.floor( application.width / c );
							if ( width & 1 ) width--;
							var c = items.length;
							for ( var i = 0; i < c; i++ ) {
								var photo = items[ i ];
								photo.width = width;
								var height = Math.floor( width * photo.Thumbnail.Height / photo.Thumbnail.Width );
								if ( height & 1 ) height--;
								photo.height = height;
								photo.action = "/photo";
								list.add( new MainCell( photo ) );
							}
							if (more)
								this.addMoreLine(list);
							list.adjust();
						]]></method>
						<method id="createMessage" params="list, data"><![CDATA[
							var url = accountURL + serializeQuery({
								$format: "JSON",
								$skip: data.items ? data.items.length : 0,
								$top: 50,
								Query: "'" + data.what + "'"
							});
							message = new Message( url );
							message.setRequestHeader( "Authorization", "Basic " + encodeBase64( ":" + accountKey ) ); // user-name field empty
							return message;
						]]></method>
						<method id="getItems" params="list, message, result"><![CDATA[
							return ( result && ( "d" in result ) && ( "results" in result.d ) ) ? result.d.results : null;
						]]></method>
						<method id="hasMore" params="list, message, result"><![CDATA[
							return ( result && ( "d" in result) && ( "results" in result.d ) ) ? true : false;
						]]></method>
						<method id="load" params="list, more"><![CDATA[
							if ( this.data.what ) {
								SCREEN.ListBehavior.prototype.load.call( this, list, more );
								list.adjust();
							}
						]]></method>
						<method id="onFocused" params="container"><![CDATA[
							KEYBOARD.hide();
						]]></method>
						<method id="onMeasureHorizontally" params="container"><![CDATA[
							var total = application.width;
							
							var c = Math.floor( total / thumbnailWidth );
							var width = Math.floor( total / c );
							if ( width & 1 ) width--;
							var dx = ( application.width - ( c * width ) ) >> 1;
							var coordinates = { left:0, width: width, top:0, height: 0 };
							var xs = new Array( c );
							var ys = new Array( c );
							for ( var i = 0; i < c; i++ ) {
								xs[ i ] = dx + ( i * width );
								ys[ i ] = dx;
							}
							var content = container.first;
							var items = this.data.items;
							if ( items ) {
								var index = 0;
								var count = items.length;
								while ( content && ( index < count ) ) {
									var photo = items[ index ];
									var min = 0x7FFFFFFF;
									var j = 0;
									for ( var i = 0; i < c; i++ ) {
										var y = ys[ i ];
										if ( y < min ) {
											min = y;
											j = i;
										}
									}
									coordinates.left = xs[ j ];
									coordinates.top = min;
									coordinates.height = Math.floor( width * photo.Thumbnail.Height / photo.Thumbnail.Width );
									if ( coordinates.height & 1 ) coordinates.height--;
									content.coordinates = coordinates;
									ys[ j ] = min + coordinates.height;
									content = content.next;
									index++;
								}
							}
							var max = 0;
							for ( var i = 0; i < c; i++ ) {
								var y = ys[ i ];
								if ( y > max )
									max = y;
							}
							if ( content ) {
								coordinates.left = 0;
								coordinates.right = 0;
								coordinates.top = max;
								coordinates.height = 50;
								content.coordinates = coordinates;
								max += coordinates.height;
							}
							this.max = max;
							return total;
						]]></method>
						<method id="onMeasureVertically" params="container"><![CDATA[
							return this.max;
						]]></method>
						<method id="onScreenBegan" params="container, backwards, delta"><![CDATA[
							if (!backwards)
								this.data.FIELD.focus();
						]]></method>
						<method id="onTouchBegan" params="container"><![CDATA[
							displayHeaderFooter = false;
							container.focus();
						]]></method>
					</behavior>
				</layout>
				<content like="SCROLLER.VerticalScrollbar"/>
				<content like="SCROLLER.TopScrollerShadow"/>
				<content like="SCROLLER.BottomScrollerShadow"/>
			</scroller>
		</container>
		<container anchor="HEADER" like="SCREEN.SearchHeader"/>
	</container>
	
	<container id="MainCell" left="0" width="$.width" top="0" height="$.height" active="true">
		<behavior like="SCREEN.ListItemBehavior">
			<method id="changeState" params="container, data"/>
		</behavior>
		<thumbnail left="2" right="2" top="2" bottom="2" url="$.Thumbnail.MediaUrl"/>
	</container>
	
	<container id="PhotoScreen" like="SCREEN.EmptyScreen">
		<container anchor="BODY" left="0" right="0" top="0" bottom="0" active="true">
			<behavior>
				<method id="onDisplaying" params="container"><![CDATA[
					container.focus();
				]]></method>
				<method id="onScreenBegan" params="container, backwards, delta"><![CDATA[
					if (!delta) {
						var header = container.next;
						var footer = header.next;
						displayHeaderFooter = true;
						application.run( new MTRANSITION.HeaderFooterShowHideTransition, header, footer, displayHeaderFooter );
					}
				]]></method>
				<method id="onTouchBegan" params="container, id, x, y, ticks"><![CDATA[
					if ( container == container.hit( x, y ) ) {
						container.captureTouch( id, x, y, ticks );
						this.anchor = x;
					}
				]]></method>
				<method id="onTouchEnded" params="container, id, x, y, ticks"><![CDATA[
					if ( x > this.anchor ) {
						if (application.behavior.canGoBy( -1 ))
							application.behavior.doGoBy( -1 );
					}
					else if (x < this.anchor) {
						if (application.behavior.canGoBy( 1 ))
							application.behavior.doGoBy( 1 );
					}
					else {
						var header = container.next;
						var footer = header.next;
						displayHeaderFooter = !displayHeaderFooter;
						application.run( new MTRANSITION.HeaderFooterShowHideTransition, header, footer, displayHeaderFooter );
					}
				]]></method>
				<method id="onTouchMoved" params="container, id, x, y, ticks"><![CDATA[
					if ( Math.abs( x - this.anchor ) > 8 ) {
						container.captureTouch( id, x, y, ticks );
					}
				]]></method>
			</behavior>
			<picture left="0" right="0" top="0" bottom="0" url="$.thumbnailURL"/>
			<content skin="THEME.busySkin" behavior="CONTROL.BusyBehavior"/>
			<picture left="0" right="0" top="0" bottom="0" url="$.pictureURL">
				<behavior>
					<method id="onLoaded" params="picture"><![CDATA[
						var container = picture.container;
						container.remove( container.first );
						container.remove( container.first );
					]]></method>
				</behavior>
			</picture>
		</container>
		<line anchor="HEADER" like="SCREEN.PlainHeader" active="displayHeaderFooter" visible="displayHeaderFooter"/>
		<container anchor="FOOTER" like="SCREEN.EmptyFooter" active="displayHeaderFooter" visible="displayHeaderFooter">
			<line top="0" bottom="0">
				<container like="TOOL.PreviousButton"/>
				<container like="TOOL.NextButton"/>
			</line>
		</container>
	</container>
	
	<container id="ErrorScreen" left="0" right="0" top="0" bottom="0" skin="blackSkin">
		<text left="0" right="0" style="errorStyle" string="$.message"/>
	</container>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- TRANSITIONS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		
	<transition id="ZoomTransition">
		<method id="prepare" params="container, list, revealIt"><![CDATA[
			var data = list.behavior.data;
			var cell = list.content( data.selection );
			var layer = this.layer = new Layer;
			if ( revealIt ) {
				var bounds = {
					x: cell.x - list.x,
					y: cell.y - list.y,
					width: cell.width,
					height: cell.height,
				}
				list.container.reveal( bounds );
				list.container.adjust();
			}
			layer.capture( cell );
			container.add( layer );
			layer.position = cell.position;
			var containerWidth = container.width;
			var containerHeight = container.height;
			var srcWidth = cell.width;
			var srcHeight = cell.height;
			var dstWidth = container.width;
			var dstHeight = Math.round( srcHeight * containerWidth / srcWidth );
			if ( dstHeight > containerHeight ) {
				dstHeight = containerHeight;
				dstWidth = Math.round( srcWidth * containerHeight / srcHeight );
			}
			this.scale = { 
				x: ( dstWidth / srcWidth ) - 1, 
				y: ( dstHeight / srcHeight ) - 1
			}; 
			this.translation = { 
				x: ( ( containerWidth - dstWidth ) >> 1 ) - ( layer.x - container.x ), 
				y: ( ( containerHeight - dstHeight ) >> 1 ) - ( layer.y - container.y ), 
			}; 
		]]></method>
		<method id="transform" params="layer, fraction"><![CDATA[
			layer.scale = { x: 1 + ( this.scale.x * fraction ), y: 1 + ( this.scale.y * fraction ) };
			layer.translation = { x: this.translation.x * fraction, y: this.translation.y * fraction };
		]]></method>
	</transition>

	<transition id="ZoomInTransition" like="ZoomTransition">
		<method id="onBegin" params="container, former, current, formerData, currentData"><![CDATA[
			this.prepare( container, formerData.LIST );
		]]></method>
		<method id="onEnd" params="container, former, current"><![CDATA[
			container.remove( this.layer );
			container.replace( former, current );
		]]></method>
		<method id="onStep" params="fraction"><![CDATA[
			this.transform( this.layer, Math.quadEaseOut( fraction ) );
		]]></method>
	</transition>
	
	<transition id="ZoomOutTransition" like="ZoomTransition">
		<method id="onBegin" params="container, former, current, formerData, currentData"><![CDATA[
			container.replace( former, current );
			container.adjust();
			this.prepare( container, currentData.LIST, true );
		]]></method>
		<method id="onEnd" params="container, former, current"><![CDATA[
			container.remove( this.layer );
		]]></method>
		<method id="onStep" params="fraction"><![CDATA[
			this.transform( this.layer, Math.quadEaseIn( 1 - fraction ) );
		]]></method>
	</transition>
	
</program>
