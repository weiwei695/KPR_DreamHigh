<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  NOTE:
  
  The web service at http://k3.cloud.kinoma.com/api is operated by the Kinoma team for making music prototypes.
  It is not for commercial or large scale use. It may be modified or discontinued without notice.
-->
<program xmlns="http://www.kinoma.com/kpr/1">	
	<require path="themes/sample/theme" id="THEME"/>
	<require path="mobile/control" id="CONTROL"/>
	<require path="mobile/dialog" id="DIALOG"/>
	<require path="locale" id="LOCALE"/>
	<require path="mobile/keyboard" id="KEYBOARD"/>
	<require path="mobile/model" id="MODEL"/>
	<require path="mobile/screen" id="SCREEN"/>
	<require path="mobile/scroller" id="SCROLLER"/>
	<require path="mobile/tool" id="TOOL"/>
	<require path="mobile/transition" id="TRANSITION"/>

	<effect id="browseSelectedEffect">
		<colorize color="#5eccf1"/>
	</effect>
	<effect id="playerDisabledEffect">
		<colorize color="#515153"/>
	</effect>

	<style id="applicationStyle" font="18px Fira Sans" color="black" align="left,middle"/>
	<script>
		var channelTickSkin;
		var radioChannelStyle;
		application.style = applicationStyle;
		var volumeBackgroundSkin = new Skin({ 
			texture: new Texture(mergeURI(application.url, "./assets/audio-dark2.png")),
			x:0, y:0, width:96, height: 60, variants:96, states:60,
		});
		var volumeForegroundSkin = new Skin({ 
			texture: new Texture(mergeURI(application.url, "./assets/audio2.png")),
			x:0, y:0, width:96, height: 60, states:60,
		});
	</script>
	
	<skin id="blackSkin" color="black"/>
	<skin id="whiteSkin" color="white"/>

	<style id="radioTitleStyle" font="32px Fira Sans Light" align="center,middle">
	</style>
	<style id="radioFooterStyle" font="40px Fira Sans Light" align="center,middle">
	</style>
	
	
	<texture id="speakerTexture" large="./assets/speaker.png"/>
	<variable id="speakerSkin" value="new CONTROL.Skin(speakerTexture, playerDisabledEffect, THEME.toolEnabledEffect, browseSelectedEffect)"/>
	<style id="sliderLabelStyle" font="bold 32px" color="white" align="center">
	</style>
	<style id="sliderValueStyle" font="bold 32px" color="white" align="center">
	</style>
	<style id="sliderLeftStyle" font="32px" color="white" align="left">
		<margins left="4"/>
	</style>
	<style id="sliderRightStyle" font="32px" color="white" align="right">
		<margins right="4"/>
	</style>
	<skin id="targetItemSkin">
		<states colors="white,#73dfff"/>
	</skin>
	<style id="targetItemStyle" font="24px" color="#333333" align="left,middle">
		<margins left="8" top="8" bottom="8"/>
	</style>
	<style id="targetSearchingStyle" font="24px" color="#96969a" align="left,middle">
		<margins left="8" top="8" bottom="8"/>
	</style>
	<texture id="marksTexture" large="./assets/marks.png"/>
	<skin id="targetItemCheckMarkSkin" texture="marksTexture" x="0" y="0" width="40" height="40"/>
	<skin id="targetDialogArrowSkin" texture="marksTexture" x="50" y="0" width="20" height="10"/>
	<skin id="dlnaIconSkin" texture="marksTexture" x="80" y="0" width="40" height="40"/>
	
	<texture id="dialTexture" large="./assets/dial.png"/>
	<skin id="dialSkin" texture="dialTexture" x="0" y="-40" width="60" height="40">
		<variants offset="60"/>
		<states offset="40"/>
	</skin>
		
	
	
	<behavior id="ApplicationBehavior">
		<method id="compute"><![CDATA[
			var data = this.data;
			var radio = data.radio;
			var width = radio.width;
			var height = radio.height;
			var min = radio.min = Math.min(radio.width, radio.height);
			var max = radio.max = Math.max(radio.width, radio.height);
			radio.barWidth = 5;
			radio.barHeight = 60;
			radio.dotSize = 50;
			radio.dotThickness = 4;
			radio.labelHeight = 40;
			radio.tickSize = 30;

			radioChannelStyle = new Style({ font:"Fira Sans", size: radio.tickSize, left:20, right:20 })
			
			var space = radio.tickSize / 4;
			var size = 10 * space;
			var canvas = new Canvas({width:size, height:size});
			var ctx = canvas.getContext("2d");
			ctx.clearRect(0, 0, canvas.width, canvas.height);
			ctx.lineWidth = 2;
			ctx.strokeStyle = radio.theme.foregroundColor;
			for (var x = 1; x < size; x += space) {
				ctx.beginPath();
				ctx.moveTo(x, 0);
				ctx.lineTo(x, size);
				ctx.stroke();
			}
			channelTickSkin = new Skin(new Texture(canvas, 1), {x:0, y:0, width:size, height:radio.tickSize}, 0, 0, { left:0, right: 0});
		]]></method>
		<method id="canSetVolume"><![CDATA[
			return true;
		]]></method>
		<method id="doSetVolume"><![CDATA[
			application.distribute("onVolumeChanged", this.data.radio);
		]]></method>
		<method id="onAdapt" params="application"><![CDATA[
			var data = this.data;
			var radio = data.radio;
			var width = application.width;
			var height = application.height;
			if ((radio.width != width) || (radio.height != height)) {
				radio.width = width;
				radio.height = height;
				this.compute();
				application.first.distribute("onAdapt", width, height);
			}
		]]></method>
		<method id="onChannelChanged" params="container, index"><![CDATA[
			if (this.currentDevice != this.localDevice) {
				this.postDIAL();
			}
		]]></method>
		<method id="onLaunch" params="application"><![CDATA[
			var preferences = this.preferences = this.readPreferences(application, "preferences", {
				radio: {
					index: 0,
					volume: 0.5,
				},
			});
			this.ambient = 0;
			this.constructors = [
				Radio,
			];	
			this.current = -1;
			this.trackingVolume = false;
			var data = this.data = {
				radio: {
					themes: [
						{
							backgroundColor: "black",
							foregroundColor: "white",
							state: 1,
						},
						{
							backgroundColor: "white",
							foregroundColor: "black",
							state: 0,
						},
					],
					artist: "",
					busy: true,
					index: preferences.radio.index,
					mute: false,
					running: false,
					title: "",
					volume: preferences.radio.volume,
					volumeMaximum: 1,
					volumeMinimum: 0,
					width: application.width,
					height: application.height,
				},
			};
			
			var theme;
			theme = data.radio.themes[0];
			theme.customEffects = [ new Effect, new Effect, new Effect ];
			theme.customEffects[0].gray("black", blendColors(0.3, "#f24b2c", "black"));
			theme.customEffects[1].gray("black", blendColors(0.3, "#77b648", "black"));
			theme.customEffects[2].gray("black", blendColors(0.3, "#2ea7cb", "black"));
			theme.hiliteColor = blendColors(0.50, theme.foregroundColor, "black");
			theme.skin = new Skin(theme.backgroundColor);
			theme.barSkin = new Skin(theme.foregroundColor);
			theme.style = new Style(undefined, theme.foregroundColor);
			theme = data.radio.themes[1];
			theme.customEffects = [ new Effect, new Effect, new Effect ];
			theme.customEffects[0].gray(blendColors(0.5, "#f24b2c", "white"), "white");
			theme.customEffects[1].gray(blendColors(0.5, "#77b648", "white"), "white");
			theme.customEffects[2].gray(blendColors(0.5, "#2ea7cb", "white"), "white");
			theme.hiliteColor = blendColors(0.75, theme.foregroundColor, "white"); 
			theme.skin = new Skin(theme.backgroundColor);
			theme.barSkin = new Skin(theme.foregroundColor);
			theme.style = new Style(undefined, theme.foregroundColor);
			data.radio.theme = data.radio.themes[0];
			this.compute();
			
			application.add(new Radio(data));
			
			this.localDevice = this.currentDevice = new LocalDevice();
			this.devices = [ this.currentDevice ];
			this.ssdpClient = new SSDP.Client();
			this.ssdpClient.addService("urn:dial-multiscreen-org:service:dial:1");
			this.ssdpClient.behavior = this;
			this.ssdpClient.start();
		]]></method>
		<method id="onQuit" params="application"><![CDATA[
			this.ssdpClient.stop();
			this.ssdpClient = undefined;
		]]></method>
		<method id="onSSDPServerUp" params="server"><![CDATA[
			trace("DIAL Server up: " + server.url + "\n");
			application.invoke(new Message("/dial?" + serializeQuery(server)));
		]]></method>	
		<method id="onSSDPServerDown" params="server"><![CDATA[
			trace("DIAL Server down: " + server.url + "\n");
			this.devices.some(function(item, index, array) {
				if (item.url == server.url) {
					array.splice(index, 1);
					if (this.currentDevice == item)
						this.selectDevice(this.localDevice.uuid);
					return true;
				}
			}, this);
			application.distribute("onDevicesChanged", this.devices);
		]]></method>	
		<method id="postDIAL"><![CDATA[
			var radio = this.data.radio;
			var query = {
				id: channels[radio.index].id,
				volume: Math.round(100 * radio.volume)
			};
			application.invoke(new Message("/dial/SomaFM/run?" + serializeQuery(query)));
		]]></method>
		<method id="readPreferences" params="application, name, preferences"><![CDATA[
			try {
				var url = mergeURI(Files.preferencesDirectory, application.di + "." + name + ".json");
				if (Files.exists(url))
					return JSON.parse(Files.readText(url));
			}
			catch(e) {
			}
			return preferences;
		]]></method>
		<method id="savePreferences"><![CDATA[
			var data = this.data;
			var preferences = this.preferences;
			preferences.radio.index = data.radio.index;
			preferences.radio.volume = data.radio.volume;
			this.writePreferences(application, "preferences", preferences);
		]]></method>
		<method id="selectDevice" params="uuid"><![CDATA[
			var former = this.currentDevice;
			var current = former;
			this.devices.some(function(item, index, array) {
				if (item.uuid == uuid) {
					current = item;
					return true;
				}
			});
			if (former != current) {
				this.currentDevice = current;
				var data = this.data;
				var radio = data.radio;
				if (former != this.localDevice) {
					var message = new Message(former.quitURL);
					message.method = "DELETE";
					application.invoke(message);
				}
				if (current == this.localDevice) {
					radio.mute = false;
				}
				else {
					radio.mute = true;
					this.postDIAL();
				}
				application.distribute("onDeviceChanged", this.currentDevice);
			}
		]]></method>
		<method id="writePreferences" params="application, name, preferences"><![CDATA[
			try {
				var url = mergeURI(Files.preferencesDirectory, application.di + "." + name + ".json");
				Files.writeText(url, JSON.stringify(preferences));
			}
			catch(e) {
			}
		]]></method>
	</behavior>

    <handler path="/dial">
		<behavior>
			<method id="onComplete" params="handler, message, document"><![CDATA[
				var device = parseQuery(handler.message.query);
				device.applicationURL = message.getResponseHeader("Application-URL") + "somafmplayer.example.kinoma.marvell.com";
				device.friendlyName = document.getElementsByTagName("friendlyName").item(0).firstChild.value;
				var element = document.getElementsByTagName("icon").item(0);
				if (element)
					device.iconURL = mergeURI(device.url, element.getElement("url"));
				application.invoke(new Message("/dial/SomaFM?" + serializeQuery(device)));
			]]></method>	
			<method id="onInvoke" params="handler, message"><![CDATA[
				var server = parseQuery(message.query);
				var message = new Message(server.url)
				handler.invoke(message, Message.DOM);
			]]></method>	
		</behavior>
    </handler>
    <handler path="/dial/SomaFM">
		<behavior>
			<method id="onComplete" params="handler, message, document"><![CDATA[
				var device = parseQuery(handler.message.query);
				if (message.status == 200) { // check if device supports SomaFM application
					device.applicationURL = message.url;
					var elements = document.getElementsByTagName("link");
					var c = elements.length;
					for (var i = 0; i < c; i++) {
						var element = elements.item(i);
						if ("run" == element.getAttribute("rel")) {
							device.quitURL = device.applicationURL + "/" + element.getAttribute("href");
							break;
						}
					}
					model.devices.push(device);
					application.distribute("onDevicesChanged", model.devices);
				}
			]]></method>	
			<method id="onInvoke" params="handler, message"><![CDATA[
				var device = parseQuery(message.query);
				var message = new Message(device.applicationURL)
				handler.invoke(message, Message.DOM);
			]]></method>	
		</behavior>
    </handler>
    <handler path="/dial/SomaFM/run">
		<behavior>
			<method id="onComplete" params="handler, message, document"><![CDATA[
				if (message.status == 201) { // check if device supports SomaFM application
					var device = null;
					var applicationURL = message.url;
					model.devices.some(function(item, index, array) {
						if ("applicationURL" in item) {
							if (applicationURL == item.applicationURL) {
								device = item;
								device.quitURL = message.getResponseHeader("LOCATION");
								return true;
							}
						}
					});
				}
			]]></method>	
			<method id="onInvoke" params="handler, message"><![CDATA[
				var string = message.query;
				var message = new Message(model.currentDevice.applicationURL);
				message.requestText = string;
				message.method = "POST";
				message.setRequestHeader("Content-Type", "text/plain");
				message.setRequestHeader("Content-Length", string.length);
				handler.invoke(message, Message.TEXT);
			]]></method>	
		</behavior>
    </handler>

	<line id="DeviceItemLine" left="0" right="0" active="true" skin="targetItemSkin" >
		<behavior like="SCREEN.ListItemBehavior"><![CDATA[
			function onTap(line) {
				model.selectDevice(this.data.uuid);
				line.bubble("onCancel");
			}
			function onTouchEnded(line, id, x, y, ticks) {
				SCREEN.ListItemBehavior.prototype.onTouchEnded.call(this, line, id, x, y, ticks);
				this.onTouchCancelled(line, id, x, y, ticks);
			}
		]]></behavior>
		<content width="2" height="40"/>
		<container width="40" height="40">
			<thumbnail width="40" height="40" url="$.iconURL" behavior="CONTROL.ThumbnailBehavior">
			</thumbnail>
		</container>
		<text left="0" right="0" style="targetItemStyle" string="$.friendlyName"/>
		<content width="40" height="40" skin="targetItemCheckMarkSkin" visible="$.uuid == model.currentDevice.uuid"/>
	</line>
	<container id="DevicesSearchingGlyph" width="40" height="40">
		<picture width="200" height="200" url="'./assets/searching.png'">
			<behavior><![CDATA[
				function onCreate(picture) {
					picture.opacity = 0.66;
					picture.origin = { x:100, y:100 };
					picture.scale = { x:0.2, y:0.2 };
				}
				function onDisplaying(picture) {
					picture.start();
				}
				function onTimeChanged(picture) {
					var rotation = picture.rotation;
					rotation += 1;
					if (rotation > 360) rotation = 0;
					picture.rotation = rotation;
				}
		
			]]></behavior>
		</picture>
	</container>
	<line id="DevicesSearchingLine" left="0" right="0" >
		<behavior like="SCREEN.ListItemBehavior"><![CDATA[
			function onCreate(container) {
				this.onNetworkConfigurationChanged(container);
			}
			function onNetworkConfigurationChanged(container) {
				var text = container.last;
				if (model.localNetworkCount) {
					var ssid = system.SSID;
					if (ssid)
						text.string = "Searching on “" + ssid + "”...";
					else
						text.string = "Searching...";
				}
				else {
					text.string = "Searching...";
				}
			}
			function onTouchEnded(line, id, x, y, ticks) {
				line.bubble("onCancel");
			}
		]]></behavior>
		<container like="DevicesSearchingGlyph"/>
		<text left="0" right="0" style="targetSearchingStyle"/>
	</line>
	<scroller id="DevicesScroller" left="0" right="0" top="0" bottom="0" skin="THEME.whiteSkin" behavior="SCROLLER.VerticalScrollerBehavior" active="true" clip="true">
		<column left="0" right="0" top="0">
			<iterate on="model.devices">
				<line like="DeviceItemLine"/>
			</iterate>
			<line like="DevicesSearchingLine" active="true"/>
		</column>
	</scroller>
	<container id="DevicesDialogBox" left="0" right="0" top="0" bottom="0" active="true" skin="THEME.cancellerSkin">
		<behavior><![CDATA[
			function onTouchEnded(container, id, x, y, ticks) {
				var layout = container.first;
				if (!layout.hit(x, y))
					layout.behavior.onCancel(layout);
			}	
		]]></behavior>
		<container left="10" width="240" bottom="60" skin="THEME.dialogBoxSkin">
			<behavior><![CDATA[
				function onCancel(layout) {
					application.run(new THEME.MenuCloseTransition, application.last, this.data.button);
					model.dialog = null;
				}	
				function onCreate(layout, data) {
					this.data = data;
				}	
				function onDevicesChanged(layout, devices) {
					layout.replace(layout.first, new DevicesScroller(this.data));
				}	
				function onDisplaying(layout) {
					this.former = layout.focus();
				}
				function onKeyDown(layout, key, repeat, ticks) {
					return true;
				}
				function onKeyUp(layout, key, repeat, ticks) {
					var code = key.charCodeAt(0);
					if ((code == 8) || (code == 0xF0001))
						this.onCancel(layout);
					return true;
				}
				function onUndisplayed(layout) {
					if (this.former)
						this.former.focus();
				}
			]]></behavior>
			<scroller like="DevicesScroller"/>
			<content left="20" bottom="-10" skin="targetDialogArrowSkin"/>
		</container>
	</container>
	
	<behavior id="RoundSliderBehavior" like="CONTROL.SliderBehavior"><![CDATA[
		function onTouchBegan(container, id, x, y, ticks) {
			container.captureTouch(id, x, y, ticks);
			this.onTouchMoved(container, id, x, y, ticks);
		}
		function onTouchEnded(container, id, x, y, ticks) {
		}
		function onTouchMoved(canvas, id, x, y, ticks) {
			var size = canvas.width;
			var offset = (x - canvas.x);
			this.setOffset(canvas, size, offset);
			this.onValueChanged(canvas);
		}
		function onValueChanged(canvas) {
			var active = canvas.active;
			var size = canvas.width;
			var offset = this.getOffset(canvas, size);
			
			var x = canvas.width >> 1;
			var y = canvas.height >> 1;
			var w = 20;
			var a = Math.atan2(y, x);
			var r = ((x * x) + (y * y)) / y;
			var from = 0 - a - (Math.PI / 2);
			var to = a - (Math.PI / 2);
			y = r + ((y + w) >> 1);
			
			var ctx = canvas.getContext("2d");
			ctx.clearRect(0, 0, canvas.width, canvas.height);
			ctx.lineWidth = w;
			ctx.strokeStyle = active ? "#FFFFFF" : "#515153";
			ctx.beginPath();
			ctx.arc(x, y, r, from, to);
			ctx.stroke();
			ctx.strokeStyle = active ? "#5eccf1" : "#515153";
			ctx.beginPath();
			ctx.arc(x, y, r, from, from + ((to - from) * offset / size));
			ctx.stroke();
		}
	]]></behavior>
	<behavior id="RoundDialogBoxBehavior"><![CDATA[
			function onCancel(container) {
				this.former.focus();
				model.dialog = null;
				application.run(new MenuCloseTransition, container, this.data.button);
			}
			function onCreate(container, data) {
				this.data = data;
			}
			function onDisplaying(container) {
				this.former = container.focus();
			}
			function onKeyDown(container, key, repeat, ticks) {
				var code = key.charCodeAt(0);
				if ((code == 8) || (code == 0xF0001)) {
					this.onCancel(container);
					return true;
				}
			}
			function onTouchEnded(container, id, x, y, ticks) {
				this.onCancel(container);
			}	
	]]></behavior>
	<container id="PlayerVolumeControl" width="60" height="60">
		<scope with="model.data.radio">
			<container width="60" height="60" active="model.canSetVolume()">
				<behavior like="CONTROL.ButtonBehavior"><![CDATA[
					function onTap(container) {
						var data = {
							button: container,
							label: "Volume",
						};
						model.dialog = new PlayerVolumeDialogBox(data);
						application.run(new MenuOpenTransition, model.dialog, container);
					}
					function onVolumeChanged(container, $) {
						container.active = model.canSetVolume();
						container.first.variant = Math.min(Math.floor(4 * ($.volume - $.volumeMinimum) / ($.volumeMaximum - $.volumeMinimum)), 3);
					}
				]]></behavior>
				<content width="60" height="60" skin="speakerSkin" variant="Math.min(Math.floor(4 * ($.volume - $.volumeMinimum) / ($.volumeMaximum - $.volumeMinimum)), 3)"/>
			</container>
		</scope>
	</container>
	<container id="PlayerVolumeDialogBox" left="0" right="0" top="0" bottom="0" active="true" skin="THEME.cancellerSkin">
		<behavior like="RoundDialogBoxBehavior"><![CDATA[
		]]></behavior>
		<container left="0" right="0" height="95">
			<label left="0" right="0" top="0" style="sliderLabelStyle" string="'Volume'"/>
			<label left="0" right="0" top="15" style="sliderLeftStyle" string="'Low'"/>
			<label left="0" right="0" top="15" style="sliderRightStyle" string="'High'"/>
			<label left="0" right="0" bottom="5" style="sliderValueStyle"/>
			<canvas left="0" right="0" top="15" bottom="0" active="true">
				<behavior like="RoundSliderBehavior"><![CDATA[
					function getMax(container) {
						return model.data.radio.volumeMaximum;
					}
					function getMin(container) {
						return model.data.radio.volumeMinimum;
					}
					function getValue(container) {
						return model.data.radio.volume;
					}
					function onTouchBegan(container, id, x, y, ticks) {
						model.trackingVolume = true;
					}	
					function onTouchEnded(container, id, x, y, ticks) {
						model.trackingVolume = false;
						model.savePreferences();
						if (model.currentDevice != model.localDevice) {
							model.postDIAL();
						}
					}
					function onValueChanged(container) {
						RoundSliderBehavior.prototype.onValueChanged.call(this, container);
						var min = this.getMin(container);
						var max = this.getMax(container);
						var value = this.getValue(container);
						if (container.active)
							container.previous.string = Math.round(100 * (value - min) / (max - min)) + "%";
						else
							container.previous.string = "";
					}
					function onVolumeChanged(container, data) {
						container.active = model.canSetVolume();
						this.onValueChanged(container);
					}
					function setValue(container, value) {
						model.data.radio.volume = value;
						model.doSetVolume();
					}
				]]></behavior>
			</canvas>
		</container>
	</container>
	
	<transition id="MenuOpenTransition" duration="250"><![CDATA[
		function onBegin(container, content, button) {
			container.add(content);
			this.canceller = content;
			var layer = this.layer = new Layer({alpha: true});
			layer.attach(content.first);
			if (!button)
				button = container;
			this.translation = { 
				x: button.x + (button.width / 2) - layer.x, 
				y: button.y + (button.height / 2) - layer.y, 
			}; 
		}
		function onEnd(container, content) {
			this.layer.detach();
		}
		function onStep(fraction) {
			this.layer.scale = { x: fraction, y: fraction };
			this.layer.translation = { x: this.translation.x * (1 - fraction), y: this.translation.y * (1 - Math.quadEaseIn(fraction)) };
			this.canceller.state = fraction;
		}
	]]></transition>
	
	<transition id="MenuCloseTransition" duration="250"><![CDATA[
		function onBegin(container, content, button) {
			this.canceller = content;
			var layer = this.layer = new Layer({alpha: true});
			layer.attach(content.first);
			layer.opacity = 1;
			if (!button)
				button = container;
			this.translation = { 
				x: button.x + (button.width / 2) - layer.x, 
				y: button.y + (button.height / 2) - layer.y, 
			}; 
		}
		function onEnd(container, content) {
			this.layer.detach();
			container.remove(content);
		}
		function onStep(fraction) {
			fraction = Math.quadEaseOut(fraction);
			this.layer.scale = { x: 1 - fraction, y: 1 - fraction };
			this.layer.translation = { x: this.translation.x * fraction, y: this.translation.y * fraction };
			this.canceller.state = 1 - fraction;
		}
	]]></transition>

	<include path="./radio"/>
	
	<script><![CDATA[
		var LocalDevice = function() {
			this.iconURL = mergeURI(application.url, "./assets/local.png");
			this.friendlyName = "My Phone";
			this.uuid = application.uuid;
			this.volume = 50;
		};
		LocalDevice.prototype = Object.create(Object.prototype, {
		});

		var model = application.behavior = new ApplicationBehavior(application);
	]]></script>
</program>
