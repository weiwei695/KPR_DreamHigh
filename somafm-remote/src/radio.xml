<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  NOTE:
  
  The web service at http://k3.cloud.kinoma.com/api is operated by the Kinoma team for making music prototypes.
  It is not for commercial or large scale use. It may be modified or discontinued without notice.
-->
<program xmlns="http://www.kinoma.com/kpr/1">
	<require id="SCROLLER" path="mobile/scroller"/>
	
	<script><![CDATA[
		var channels = [
			{ id: "covers", title: "Covers", thumbnail: "covers120.jpg", description: "Just Covers, songs you know only not by the original artists. We've got you covered.", screen_name: "covers" },
			{ id: "indiepop130", title: "Indie Pop Rocks!", thumbnail: "indychick.jpg", description: "New and favorite classic indie pop tracks.", screen_name: "indiepop" },
			{ id: "secretagent", title: "Secret Agent", thumbnail: "secretagent120.jpg", description: "The soundtrack for your stylish, mysterious, dangerous life. For Spies and PIs too!", screen_name: "secretagent" },
			{ id: "groovesalad", title: "Groove Salad", thumbnail: "groovesalad120.gif", description: "A nicely chilled plate of ambient beats and grooves.", screen_name: "groovesalad" },
			{ id: "dronezone", title: "Drone Zone", thumbnail: "dronezone120.jpg", description: "Served best chilled, safe with most medications. Atmospheric textures with minimal beats.", screen_name: "dronezone" },
			{ id: "missioncontrol", title: "Mission Control", thumbnail: "missioncontrol120.jpg", description: "Live and historic NASA mission audio mixed with electronic ambient.", screen_name: "missioncontrol" },
			{ id: "suburbsofgoa", title: "Suburbs of Goa", thumbnail: "sog120.jpg", description: "Desi-influenced Asian world beats and beyond.", screen_name: "suburbsofgoa" },
			{ id: "lush", title: "Lush", thumbnail: "lush120.jpg", description: "Sensuous and mellow vocals, mostly female, with an electronic influence.", screen_name: "lush" },
			
			{ id: "tags", title: "Tag's Trip", thumbnail: "tagstrancefract.jpg", description: "Progressive house / trance. Tip top tunes.", screen_name: "tags" },
			{ id: "u80s", title: "Underground 80s", thumbnail: "u80s-120.png", description: "Early 80s UK Synthpop and a bit of New Wave.", screen_name: "u80s" },
			{ id: "sonicuniverse", title: "Sonic Universe", thumbnail: "sonicuniverse120.jpg", description: "A mix of avant garde jazz, euro jazz and nu jazz. Eclectic takes on traditional jazz.", screen_name: "sonicuniverse" },
			{ id: "digitalis", title: "Digitalis", thumbnail: "digitalis120.gif", description: "Digitally affected analog rock to calm the agitated heart. Screengazing encouraged. ", screen_name: "digitalis" },
			{ id: "poptron", title: "PopTron!", thumbnail: "poptron120.png", description: "Electropop and indie dance rock with sparkle and pop.", screen_name: "poptron" },
			{ id: "bootliquor", title: "Boot Liquor", thumbnail: "bootliquor.gif", description: "Americana roots music with a bit of attitude. For Cowhands, Cowpokes and Cowtippers.", screen_name: "bootliquor" },
			{ id: "beatblender", title: "Beat Blender", thumbnail: "blender.gif", description: "A late night blend of deep-house and downtempo chill.", screen_name: "beatblender" },
			{ id: "doomed", title: "Doomed", thumbnail: "doomed.gif", description: "Dark music for tortured souls. A haunted industrial/ambient soundtrack.", screen_name: "doomed" },
		];
		
		var customEffectIndex = 0;
		
	]]></script>

	<container id="Radio" left="0" right="0" top="0" bottom="0" skin="$.radio.theme.skin" style="$.radio.theme.style">
		<behavior>
			<method id="onAdapt" params="container"><![CDATA[
				var data = this.data;
				delete data.IMAGE
				var collage = new Collage(data);
				container.replace(data.COLLAGE, collage);
				data.COLLAGE = collage;
				var tuner = new Tuner(data);
				container.replace(data.TUNER, tuner);
				data.TUNER = tuner;
				var header = new Header(data);
				container.replace(data.HEADER, header);
				data.HEADER = header;
				var footer = new Footer(data);
				container.replace(data.FOOTER, footer);
				data.FOOTER = footer;
			]]></method>
			<method id="onCreate" params="container, $"><![CDATA[
				container.duration = 30000;
				var data = this.data = $.radio;
				data.running = true;
			]]></method>
			<method id="onChannelChanged" params="container, index"><![CDATA[
				var data = this.data;
				if (data.index != index) {
					data.artist = "";
					data.busy = true;
					data.index = index;
					data.title = "";
					model.savePreferences();
					container.distribute("onBusyChanged");
					container.distribute("onSongChanged");
					container.first.url = Message.URI('/getAudioMedia?id=' + channels[index].id);
				}
			]]></method>
			<method id="onDisplayed" params="container"><![CDATA[
				container.focus();
				container.start();
			]]></method>
			<method id="onFinished" params="container"><![CDATA[
				//if (this.data.TUNER.visible)
				//	this.toggle(container);
			]]></method>
			<method id="toggle" params="container"><![CDATA[
				var tuner = this.data.TUNER;
				if (tuner.visible)
					container.run(new HideTunerTransition, tuner);
				else
					container.run(new ShowTunerTransition, tuner);
			]]></method>
		</behavior>
		<scope with="$.radio">
			<media width="0" height="0">
				<behavior>
					<method id="onCreate" params="media, $"><![CDATA[
						this.data = $;
						media.url = Message.URI('/getAudioMedia?id=' + channels[$.index].id);
					]]></method>
					<method id="onDeviceChanged" params="media, volume"><![CDATA[
						var data = this.data;
						media.volume = data.mute ? 0 : data.volume;
					]]></method>
					<method id="onLoaded" params="media"><![CDATA[
						var data = this.data;
						media.start();
						media.volume = data.mute ? 0 : data.volume;
					]]></method>
					<method id="onMetadataChanged" params="media"><![CDATA[
						var data = this.data;
						data.title = media.title;
						data.artist = media.artist;
						media.container.distribute("onSongChanged");
					]]></method>
					<method id="onStateChanged" params="media"><![CDATA[
						var data = this.data;
						switch (media.state) {
						case Media.FAILED:
							data.busy = true;
							break;
						case Media.PAUSED:
							data.busy = false;
							break;
						case Media.PLAYING:
							data.busy = false;
							break;
						case Media.WAITING:
							data.busy = true;
							break;
						}
						media.container.distribute("onBusyChanged");
					]]></method>
					<method id="onVolumeChanged" params="media, volume"><![CDATA[
						var data = this.data;
						media.volume = data.mute ? 0 : data.volume;
					]]></method>
				</behavior>
			</media>
			<container anchor="COLLAGE" like="Collage"/>
			<container anchor="TUNER" like="Tuner"/>
			<container anchor="HEADER" like="Header"/>
			<container anchor="FOOTER" like="Footer"/>
		</scope>
	</container>
	
	<container id="Header" left="0" right="0" top="-5" bottom="0">
		<canvas left="0" width="$.width" top="10" height="40" active="true">
			<behavior>
				<method id="draw" params="canvas"><![CDATA[
					var theme = this.data.theme;
					var ctx = canvas.getContext("2d");
					ctx.clearRect(0, 0, canvas.width, canvas.height);
					ctx.fillStyle = "#c0ffffff";
					var x = this.index;
					var width = canvas.width;
					var halfWidth = width >> 1;
					var halfHeight = canvas.height >> 1;
					while (x < halfWidth) {
						var r = x * halfHeight / halfWidth;
						ctx.beginPath();
						ctx.arc(x + r, halfHeight, r, 0, 2 * Math.PI);
						ctx.closePath();
						ctx.fill();
						x += (2 * r) + 8;
					}
					while (x < width) {
						var r = halfHeight  * (1 - ((x - halfWidth) / halfWidth));
						ctx.beginPath();
						ctx.arc(x + r, halfHeight, r, 0, 2 * Math.PI);
						ctx.closePath();
						ctx.fill();
						x += (2 * r) + 8;
					}
				]]></method>
				<method id="onBusyChanged" params="canvas"><![CDATA[
					var busy = this.data.busy;
					canvas.visible = busy;
					if (busy)
						canvas.start();
					else
						canvas.stop();
				]]></method>
				<method id="onCreate" params="canvas, $"><![CDATA[
					this.data = $;
					this.count = 40;
					this.index = this.count - 1;
					this.draw(canvas);
					this.onBusyChanged(canvas);
				]]></method>
				<method id="onDisplaying" params="canvas"><![CDATA[
					canvas.interval = 25;
					canvas.start();
				]]></method>
				<method id="onTimeChanged" params="canvas"><![CDATA[
					var index = this.index - 1;
					if (index < 0)
						index = this.count - 1;
					this.index = index;
					this.draw(canvas);
				]]></method>
			</behavior>
		</canvas>	
		<scroller left="0" right="0" top="0" height="60" visible="false" active="true" loop="true" clip="true">
			<behavior>
				<method id="onBusyChanged" params="scroller"><![CDATA[
					scroller.visible = !this.data.busy;
					this.tick(scroller)
				]]></method>
				<method id="onCreate" params="scroller, $"><![CDATA[
					this.data = $;
				]]></method>
				<method id="onDisplaying" params="scroller"><![CDATA[
					this.onBusyChanged(scroller);
					this.onSongChanged(scroller);
				]]></method>
				<method id="onDisplayed" params="scroller"><![CDATA[
					this.tick(scroller)
				]]></method>
				<method id="onSongChanged" params="scroller"><![CDATA[
					var title = this.data.title;
					var artist = this.data.artist;
					if (artist) title += " - " + artist;
					scroller.first.string = " " + title + " ";
					this.tick(scroller)
				]]></method>
				<method id="onTimeChanged" params="scroller"><![CDATA[
					scroller.scrollBy(1, 0);
				]]></method>
				<method id="tick" params="scroller"><![CDATA[
					scroller.interval = 25;
					if (scroller.visible && (scroller.width < scroller.first.width))
						scroller.start();
					else
						scroller.stop();
				]]></method>
			</behavior>
			<label style="radioTitleStyle"/>
		</scroller>
	</container>
	<container id="Footer" left="0" right="0" top="0" bottom="-5">
		<container left="0" width="80" height="60" bottom="0" active="true">
			<behavior like="CONTROL.ButtonBehavior">
				<method id="onDeviceChanged" params="container"><![CDATA[
					container.first.variant = model.currentDevice == model.localDevice ? 0 : 1;
				]]></method>
				<method id="onTap" params="container"><![CDATA[
					var data = {
						button: container,
						scroll: {
							x: 0,
							y: 0
						},
						selection: -1,
					};
					model.dialog = new DevicesDialogBox(data);
					application.run(new THEME.MenuOpenTransition, model.dialog, container);
				]]></method>
			</behavior>
			<content left="10" bottom="10" skin="dialSkin"/>
		</container>
		<label height="60" bottom="0" style="radioFooterStyle" string="'SOMA FM'"/>
		<container like="PlayerVolumeControl" right="0" bottom="0"/>
	</container>
	
	<container id="Tuner" left="0" right="0" top="0" bottom="0">
		<scroller left="0" right="0" height="$.height" active="true" clip="true">
			<behavior like="SCROLLER.HorizontalScrollerBehavior" >
				<method id="onCreate" params="scroller, $"><![CDATA[
					SCROLLER.HorizontalScrollerBehavior.prototype.onCreate.call(this, scroller, $);
					this.index = $.index;
				]]></method>
				<method id="anAdapt" params="scroller, width, height"><![CDATA[
					scroller.height = height;
				]]></method>
				<method id="onDisplaying" params="scroller"><![CDATA[
					SCROLLER.HorizontalScrollerBehavior.prototype.onDisplaying.call(this, scroller);
					scroller.scroll = { x:channels[this.index].offset - (scroller.width >> 1), y:0 };
				]]></method>
				<method id="onScrolled" params="scroller"><![CDATA[
					if (!scroller.tracking)
						scroller.bubble("onChannelChanged", this.index);
				]]></method>
				<method id="snap" params="scroller, position, direction"><![CDATA[
					var c = channels.length;
					var delta = application.width >> 1
					position += delta;
					var left = channels[0].offset;
					if (position < left) {
						this.index = 0;
						return left - delta;
					}
					for (var i = 1; i < c; i++) {
						var right = channels[i].offset;
						if (position < right) {
							if (position - left < right - position) {
								this.index = i - 1;
								return left - delta;
							}
							this.index = i;
							return right - delta;
						}
						left = right;
					}
					this.index = c - 1;
					return right - delta;
				]]></method>
			</behavior>
			<layout left="0" height="$.height">
				<behavior>
					<method id="onCreate" params="layout, data"><![CDATA[
						this.data = data;
					]]></method>
					<method id="onMeasureHorizontally" params="layout, width"><![CDATA[
						var container = layout.first.next;
						var $ = model.data.radio;
						var i = 0;
						
						var delta = $.width >> 1
						var barHeight = $.barHeight;
						var barY = Math.round((($.height + $.tickSize) / 2) - barHeight);
						
						var labelHeight = $.labelHeight;
						var labelY = barY - labelHeight;
						
						var bottomCoordinates = { left:0, width:0, height:$.height, bottom:0 };
						var bottomLabelCoordinates = { left:0, right:0, height:labelHeight, bottom:labelY };
						var bottomBarCoordinates = { left:0, width:$.barWidth, height:barHeight, bottom:barY };
						var topCoordinates = { left:0, width:0, top:0, height:$.height };
						var topLabelCoordinates = { left:0, right:0, top:labelY, height:labelHeight, };
						var topBarCoordinates = { left:0, width:$.barWidth, top:barY, height:barHeight };
						while (container) {
							var channel = channels[i];
							var size = radioChannelStyle.measure(channel.title);
							var width = size.width;
							var half = width >> 1;
							if (i == 0) {
								bottomCoordinates.left = delta - half;
								topCoordinates.left = delta - half;
							}
							if (i % 2) {
								bottomCoordinates.width = width;
								container.coordinates = bottomCoordinates;
								container.first.coordinates = bottomLabelCoordinates;
								bottomBarCoordinates.left = half - ((bottomCoordinates.left + half) % 5);
								container.last.coordinates = bottomBarCoordinates;
								channel.offset = bottomCoordinates.left + bottomBarCoordinates.left + 1;
								bottomCoordinates.left += width;
							}
							else {
								topCoordinates.width = width;
								container.coordinates = topCoordinates;
								container.first.coordinates = topLabelCoordinates;
								topBarCoordinates.left = half - ((topCoordinates.left + half) % 5);
								container.last.coordinates = topBarCoordinates;
								channel.offset = topCoordinates.left + topBarCoordinates.left;
								topCoordinates.left += width;
							}
							container = container.next;
							i++;
						}
						bottomCoordinates.left += delta - half;
						topCoordinates.left += delta - half;
						return Math.max(bottomCoordinates.left, topCoordinates.left);
					]]></method>
				</behavior>
				<content skin="channelTickSkin" left="0 - $.width" right="0 - $.width" height="$.tickSize"/>
				<iterate on="channels">
					<container>
						<label style="radioChannelStyle" string="$.title"/>
						<content skin="$$.theme.barSkin"/>
					</container>
				</iterate>
			</layout>
			<canvas width="$.dotSize" height="$.dotSize">
				<behavior>
					<method id="draw" params="canvas"><![CDATA[
						var data = this.data;
						var theme = data.theme;
						var ctx = canvas.getContext("2d");
						ctx.clearRect(0, 0, canvas.width, canvas.height);
						var radius = canvas.width >> 1;
						var lineWidth = data.dotThickness;
						ctx.beginPath();
						ctx.arc(radius, radius, radius - lineWidth, 0, 2 * Math.PI);
						ctx.closePath();
						ctx.lineWidth = lineWidth;
						ctx.fillStyle = theme.backgroundColor;
						ctx.fill();
						ctx.strokeStyle = theme.foregroundColor;
						ctx.stroke();
					]]></method>
					<method id="onCreate" params="canvas, $"><![CDATA[
						this.data = $;
						this.draw(canvas);
					]]></method>
				</behavior>
			</canvas>	
		</scroller>
	</container>
	
	<container id="Collage" left="0" right="0" top="0" bottom="0">
		<behavior>
			<method id="doBrowse" params="container, delta"><![CDATA[
				var c = this.images.length;
				var i = this.index + delta;
				if (c) {
				if (i >= c) i = 0;
					this.index = i;
					this.loading = true;
					var picture = new Picture({ left:0, top:0 });
					picture.behavior = new CollagePictureBehavior(picture, this.images[i], this.data.theme);
					this.data.IMAGE = picture;
				}
				else
					this.data.IMAGE = null;
			]]></method>
			<method id="onComplete" params="container, message, json"><![CDATA[
				if (json && ("result" in json) && ("images" in json.result) && json.result.images.length)
					this.images = json.result.images;
				else
					this.images = this.defaultImages;
				container.stop();
				this.index = 0;
				this.doBrowse(container, 0);
			]]></method>
			<method id="onCreate" params="container, $"><![CDATA[
				this.data = $;
				container.duration = 9000;
				this.defaultImages = this.images = [ {uri: mergeURI(application.url, "./assets/default0.jpg") } ];
				this.index = 0;
				this.doBrowse(container, 0);
				this.onSongChanged(container);
			]]></method>
			<method id="onFinished" params="container"><![CDATA[
				if (!this.loading)
					container.run(new CollageTransition, container.first, this.data.IMAGE);
			]]></method>
			<method id="onLoaded" params="container"><![CDATA[
				if (this.data.IMAGE.ready) {
					this.loading = false;
					if (!container.transitioning && !container.running)
						container.run(new CollageTransition, container.first, this.data.IMAGE);
				}
				else
					this.doBrowse(container, 1);
			]]></method>
			<method id="onSongChanged" params="container"><![CDATA[
				var artist = this.data.artist;
				var title = this.data.title;
				if (artist && title) {
					var message = new Message("http://k3.cloud.kinoma.com/api");
					message.method = "POST";
					var transaction = {
						"action": "Artist",
						"method": "getImages",
						"data": {
							"artistName": artist,
							"albumName": title,
							"screenWidth": application.width,
							"screenHeight": application.height,
							"screenMode": "max",
							"shuffle": false,
							"limit": 30
						}
					}
					var body = JSON.stringify(transaction);
					message.requestText = body;
					message.setRequestHeader("Content-Length", body.length);
					container.invoke(message, Message.JSON);
				}
			]]></method>
			<method id="onTransitionBeginning" params="container"><![CDATA[
				this.doBrowse(container, 1);
			]]></method>
			<method id="onTransitionEnded" params="container"><![CDATA[
				application.purge();
				container.time = 0;
				container.start();
			]]></method>
		</behavior>
		<content/>
	</container>
	<behavior id="CollageLayerBehavior">
		<method id="onCreate" params="layer, $"><![CDATA[
			layer.duration = 10000;
			layer.opacity = 0;
			layer.subPixel = true;
			this.dx = $.dx;
			this.dy = $.dy;
		]]></method>
		<method id="onTimeChanged" params="layer"><![CDATA[
			var dx = this.dx;
			var dy = this.dy;
			var f = layer.fraction;
			layer.translation = { x: 0 - (f * dx), y: 0 - (f * dy) };
		]]></method>
	</behavior>
	<behavior id="CollagePictureBehavior">
		<method id="onCreate" params="picture, $, theme"><![CDATA[
			if ($.uri.indexOf("file://") == 0) {
				picture.aspect = "fill";
				picture.coordinates = { width: application.width, height: application.height };
			}
			else
				picture.aspect = "draw";
			picture.url = $.uri;
			customEffectIndex++;
			if (customEffectIndex > 2)
				customEffectIndex = 0;
			picture.effect = theme.customEffects[customEffectIndex];
		]]></method>
		<method id="onLoaded" params="picture"><![CDATA[
			model.data.radio.COLLAGE.delegate("onLoaded");
		]]></method>
	</behavior>
	<transition id="CollageTransition" duration="1000">
		<method id="onBegin" params="container, content, picture"><![CDATA[
			var srcWidth = picture.width;
			var srcHeight = picture.height;
			var dstWidth = application.width;
			var dstHeight = application.height;
			var srcRatio = srcWidth / srcHeight;
			var dstRatio = dstWidth / dstHeight;
			var scale, dx, dy;
			if (srcRatio > dstRatio) {
				scale = dstHeight / srcHeight;
				dx = Math.round(srcWidth * scale) - dstWidth;
				dy = 0;
			}
			else {
				scale = dstWidth / srcWidth;
				dx = 0;
				dy =  Math.round(srcHeight * scale) - dstHeight;
			}
			picture.scale = { x: scale, y: scale };
			container.add(picture);
			var layer = this.layer = new Layer({ alpha: false });
			layer.capture(picture, 0, 0, dstWidth + dx, dstHeight + dy);
			var coordinates = layer.coordinates;
			layer.behavior = new CollageLayerBehavior(layer, { dx: dx, dy: dy });
			container.replace(picture, layer);
			picture.url = null;
			layer.start();
		]]></method>
		<method id="onEnd" params="container, content, picture"><![CDATA[
			container.remove(content);
		]]></method>
		<method id="onStep" params="fraction"><![CDATA[
			this.layer.opacity = Math.quadEaseOut(fraction);
		]]></method>
	</transition>
	
	<transition id="HideTunerTransition" duration="500">
		<method id="onBegin" params="container, current"><![CDATA[
			var layer = this.layer = new Layer({ alpha:true });
			layer.attach(current);
		]]></method>
		<method id="onEnd" params="container, current"><![CDATA[
			this.layer.detach();
			current.visible = false;
		]]></method>
		<method id="onStep" params="fraction"><![CDATA[
			fraction = Math.quadEaseOut(fraction);
			this.layer.opacity = 1 - fraction;
		]]></method>
	</transition>
	
	<transition id="ShowTunerTransition" duration="500">
		<method id="onBegin" params="container, current"><![CDATA[
			current.visible = true;
			var layer = this.layer = new Layer({ alpha:true });
			layer.attach(current);
		]]></method>
		<method id="onEnd" params="container, current"><![CDATA[
			this.layer.detach();
		]]></method>
		<method id="onStep" params="fraction"><![CDATA[
			fraction = Math.quadEaseOut(fraction);
			this.layer.opacity = fraction;
		]]></method>
	</transition>
	
	<handler path="/getAudioMedia">
		<behavior>
			<method id="onComplete" params="handler, message, text"><![CDATA[
				var value;
				var lines = text.split("\n");
				var c = lines.length;
				if (lines[0] == "[playlist]") {
					for (var i = 1; i < c; i++) {
						var pair = lines[i].split("=");
						if (pair.length == 2) {
							var name = pair[0].toLowerCase();
							if (name.indexOf("file") == 0) {
								value = pair[1];
								break;
							}
						}
					}
				}
				if (value)
					handler.redirect(value, "audio/mpeg");
			]]></method>
			<method id="onInvoke" params="handler, message"><![CDATA[
				var query = parseQuery(message.query);
				var message = new Message("http://somafm.com/" + query.id + ".pls");
				handler.invoke(message, Message.TEXT);
			]]></method>
		</behavior>
	</handler>
	
	<handler path="/getImages">
		<behavior>
			<method id="onComplete" params="handler, message, json"><![CDATA[
				if (json && (true == json.result.success)) {
					handler.message.setResponseHeader("Content-Type", "text/plain");
					handler.message.responseText = JSON.stringify(json.result);
				}
			]]></method>
			<method id="onInvoke" params="handler, message"><![CDATA[
				var query = parseQuery(message.query);
				var message = new Message("http://k3.cloud.kinoma.com/api");
				message.method = "POST";
				var transaction = {
					"action": "Artist",
					"method": "getImages",
					"data": {
						"artistName": query.artist,
						"albumName": query.album,
						"screenWidth": query.width,
						"screenHeight": query.height,
						"screenMode": "max",
						"shuffle": false,
						"limit": 30
					}
				};		
				var body = JSON.stringify(transaction);
				message.requestText = body;
				message.setRequestHeader("Content-Length", body.length);
				handler.invoke(message, Message.JSON);
			]]></method>
		</behavior>
	</handler>
	

</program>