<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">
	<require path="themes/sample/theme" id="THEME"/>
	<require path="mobile/control" id="CONTROL"/>
	<require path="mobile/model" id="MODEL"/>
	<require path="mobile/screen" id="SCREEN"/>
	<require path="mobile/scroller" id="SCROLLER"/>
	<require path="mobile/tool" id="TOOL"/>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- ASSETS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<texture id="applicationIconTexture" small="assets/icon.png"/>
	<skin id="applicationIconSkin" texture="applicationIconTexture" x="0" y="0" width="80" height="80" aspect="fit"/>
	<skin id="blackSkin" color="black"/>

	<skin id="cellSkin">
		<states colors="transparent,#acd473"/>
	</skin>

	<texture id="tabTexture" small="assets/tabs.png"/>
	<variable id="tabSkin" value="new CONTROL.Skin(tabTexture, THEME.tabDisabledEffect, THEME.tabEnabledEffect, THEME.tabSelectedEffect)"/>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- STYLES -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<style id="songTitleStyle" font="24px" color="white" align="left,middle"/>
	<style id="songSubtitleStyle" font="18px" color="white" align="left,middle"/>
	<style id="unsupportedStyle" font="24px" color="white" align="center,middle"/>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- BEHAVIORS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<behavior id="GridLayoutBehavior" like="SCREEN.ListBehavior">
		<method id="addLines" params="list, items, more"><![CDATA[
			SCREEN.ListBehavior.prototype.addLines.call(this, list, items, more);
			list.adjust();
		]]></method>
		<method id="getCellGutter"><![CDATA[
			return 8;
		]]></method>
		<method id="getCellWidth"><![CDATA[
			return 100;
		]]></method>
		<method id="getCellHeight" params="width"><![CDATA[
			return width;
		]]></method>
		<method id="getHeaderHeight"><![CDATA[
			return THEME.screenHeaderHeight;
		]]></method>
		<method id="onMeasureHorizontally" params="container, width"><![CDATA[
			return width;
		]]></method>
		<method id="onMeasureVertically" params="container, height"><![CDATA[
			var content = container.first;
			var items = this.data.items;
			if (items && items.length) {
				var total = container.width;
				var c = Math.floor(total / this.getCellWidth());
				var gutter = this.getCellGutter();
				var width = Math.floor((total - ((c - 1) * gutter)) / c);
				if (width & 1) width--;
				var height = this.getCellHeight(width);
				var coordinates = {left:0, width: width, top:0, height: height};
				var xs = new Array(c);
				var ys = new Array(c);
				for (var i = 0; i < c; i++) {
					xs[i] = i * (width + gutter);
					ys[i] = gutter;
				}
				while (content) {
					var min = 0x7FFFFFFF;
					var j = 0;
					for (var i = 0; i < c; i++) {
						var y = ys[i];
						if (y < min) {
							min = y;
							j = i;
						}
					}
					coordinates.left = xs[j];
					coordinates.top = min;
					content.coordinates = coordinates;
					ys[j] = min + coordinates.height + gutter;
					content = content.next;
				}
				height = 0;
				for (var i = 0; i < c; i++) {
					var y = ys[i];
					if (y > height)
						height = y;
				}
			}
			else if (content) {
				height = application.height - this.getHeaderHeight();
				content.coordinates =  {left:0, right: 0, top:0, bottom: 0};
			}
			return height;
		]]></method>
	</behavior>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- HANDLERS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<handler path="/main">
		<behavior like="MODEL.ScreenBehavior">
			<method id="hasSelection" params="data, delta"><![CDATA[
				var tab = data.tabs[data.selection];
				var selection = tab.selection + delta;
				return (0 <= selection) && (selection < tab.items.length)
			]]></method>
			<method id="getSelection" params="data, delta"><![CDATA[
				var tab = data.tabs[data.selection];
				var selection = tab.selection + delta;
				return tab.items[selection];
			]]></method>
			<method id="onDescribe" params="query, selection"><![CDATA[
				if (!("win" == system.platform || "linux" == system.platform)) {
					return {
						Screen: MainScreen,
						selection: 0,
						skin: tabSkin,
						tabs: [
							{
								Header: Header,
								Pane: PhotosPane,
								items: null,
								more: false,
								scroll: {x: 0, y:0},
								selection: -1,
								variant: 2,
								title: "Photos",
							},
							{
								Header: Header,
								Pane: VideosPane,
								items: null,
								more: false,
								scroll: {x: 0, y:0},
								selection: -1,
								variant: 1,
								title: "Videos",
							},
							{
								Header: Header,
								Pane: SongsPane,
								items: null,
								more: false,
								scroll: {x: 0, y:0},
								selection: -1,
								variant: 0,
								title: "Songs",
							},
						]
					};
				}
				else {
					return {
						Screen: LibraryNotAvailableScreen,
						title: "Unsupported",
						prompt: "The media library is not supported on this platform",
						selection: -1,
						scroll: {x: 0, y:0}
					};
				}
			]]></method>
		</behavior>
	</handler>

	<handler path="/photo">
		<behavior like="MODEL.ScreenBehavior">
			<method id="onDescribe" params="query, selection"><![CDATA[
				return {
					Screen: PhotoScreen,
					scroll: {x: 0, y:0},
					selection: -1,
					title: selection.title,
					url: selection.url
				};
			]]></method>
		</behavior>
	</handler>

	<handler path="/video">
		<behavior like="MODEL.ScreenBehavior">
			<method id="onDescribe" params="query, selection"><![CDATA[
				return {
					Screen: VideoScreen,
					scroll: {x: 0, y:0},
					selection: -1,
					title: selection.title,
					url: selection.url
				};
			]]></method>
		</behavior>
	</handler>

	<handler path="/song">
		<behavior like="MODEL.ScreenBehavior">
			<method id="onDescribe" params="query, selection"><![CDATA[
				return {
					Screen: SongScreen,
					scroll: {x: 0, y:0},
					selection: -1,
					album: selection.album,
					artist: selection.artist,
					title: selection.title,
					thumbnail: selection.thumbnail,
					url: selection.url
				};
			]]></method>
		</behavior>
	</handler>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- LAYOUTS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<container id="Header" like="SCREEN.EmptyHeader" skin="blackSkin">
		<container like="TOOL.BackButton"/>
		<scroller like="TOOL.HeaderTitle" style="THEME.plainHeaderTitleStyle"/>
	</container>

	<container id="Body" like="SCREEN.EmptyBody" skin="blackSkin"/>

	<layout id="GridLayout" left="0" right="0" top="0"/>

	<container id="GridCell" clip="true" active="true" skin="cellSkin">
		<behavior like="SCREEN.ListItemBehavior">
			<method id="changeState" params="container, state"><![CDATA[
				container.state = state;
				container.first.opacity = 1 - state / 2;
			]]></method>
		</behavior>
		<thumbnail left="0" right="0" top="0" bottom="0" behavior="CONTROL.ThumbnailBehavior" url="$.thumbnail"/>
	</container>	

	<container id="PhotosPane" like="Body">
		<scroller like="SCROLLER.VerticalScroller" clip="true">
			<layout anchor="LIST" like="GridLayout">
				<behavior like="GridLayoutBehavior">
					<method id="addItemLine" params="list, item"><![CDATA[
						list.add(new GridCell(item));
					]]></method>
					<method id="createMessage" params="list, data"><![CDATA[
						return new Message("xkpr://library/pictures?sort=date");
					]]></method>
					<method id="getItems" params="list, message, json"><![CDATA[
						var action = "/photo";
						json.forEach(function(item) {
							item.action = action;
						});
						return json;
					]]></method>
				</behavior>
			</layout>
			<content like="SCROLLER.VerticalScrollbar"/>
		</scroller>
	</container>

	<container id="VideosPane" like="Body">
		<scroller like="SCROLLER.VerticalScroller" clip="true">
			<layout anchor="LIST" like="GridLayout">
				<behavior like="GridLayoutBehavior">
					<method id="addItemLine" params="list, item"><![CDATA[
						list.add(new GridCell(item));
					]]></method>
					<method id="createMessage" params="list, data"><![CDATA[
						return new Message("xkpr://library/movies?sort=date");
					]]></method>
					<method id="getItems" params="list, message, json"><![CDATA[
						var action = "/video";
						json.forEach(function(item) {
							item.action = action;
						});
						return json;
					]]></method>
				</behavior>
			</layout>
			<content like="SCROLLER.VerticalScrollbar"/>
		</scroller>
	</container>

	<line id="SongCell" left="0" right="0" height="50" skin="cellSkin" active="true" behavior="SCREEN.ListItemBehavior">
		<container width="50" height="50">
			<thumbnail left="4" right="4" top="4" bottom="4" url="$.thumbnail">
				<behavior like="CONTROL.ThumbnailBehavior">
					function onLoaded(thumbnail) {
						if (!thumbnail.ready) {
							thumbnail.url = mergeURI(application.url, "./assets/genericAlbum.png");
						}
					}
				</behavior>
			</thumbnail>
		</container>
		<column left="8" right="10" top="0">
			<label left="0" right="0" style="songTitleStyle" string="$.title"/>
			<label left="0" right="0" style="songSubtitleStyle" string="$.artist"/>
		</column>
	</line>

	<container id="SongsPane" like="Body">
		<scroller like="SCROLLER.VerticalScroller">
			<column anchor="LIST" left="0" right="0" top="0">
				<behavior like="SCREEN.ListBehavior">
					<method id="addItemLine" params="list, item"><![CDATA[
						list.add(new SongCell(item));
					]]></method>
					<method id="createMessage" params="list, data"><![CDATA[
						return new Message("xkpr://library/music/songs");
					]]></method>
					<method id="getItems" params="list, message, json"><![CDATA[
						var action = "/song";
						json.forEach(function(item) {
							item.action = action;
						});
						return json;
					]]></method>
				</behavior>
			</column>
			<content like="SCROLLER.VerticalScrollbar"/>
		</scroller>
	</container>

	<container id="MainScreen" like="SCREEN.EmptyScreen">
		<container anchor="BODY" like="$.tabs[$.selection].Pane" with="$.tabs[$.selection]"/>
		<line anchor="FOOTER" like="SCREEN.TabFooter"/>
		<container anchor="HEADER" like="$.tabs[$.selection].Header" with="$.tabs[$.selection]"/>
	</container>
   
	<container id="PhotoScreen" like="SCREEN.EmptyScreen">
		<container anchor="BODY" like="Body">
			<picture left="0" right="0" top="0" bottom="0" url="$.url"/>
		</container>
		<container anchor="HEADER" like="Header"/>
	</container>

	<container id="VideoScreen" like="SCREEN.EmptyScreen">
		<container anchor="BODY" like="Body">
			<media left="0" right="0" top="0" bottom="0" url="$.url">
				<behavior>
					<method id="onLoaded" params="media"><![CDATA[
						media.start();
					]]></method>
				</behavior>
			</media>
		</container>
		<container anchor="HEADER" like="Header"/>
	</container>

	<container id="SongScreen" like="SCREEN.EmptyScreen">
		<container anchor="BODY" like="Body">
			<media left="0" right="0" top="0" bottom="0" url="$.url">
				<behavior>
					<method id="onLoaded" params="media"><![CDATA[
						media.start();
					]]></method>
				</behavior>
			</media>
		</container>
		<container anchor="HEADER" like="Header"/>
	</container>

	<container id="LibraryNotAvailableScreen" like="SCREEN.EmptyScreen">
		<container anchor="BODY" like="Body">
			<text left="4" right="4" top="4" bottom="4" style="unsupportedStyle" string="$.prompt"/>
		</container>
		<container anchor="HEADER" like="Header"/>
	</container>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- SCRIPTS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
	<script><![CDATA[
		application.behavior = new MODEL.ApplicationBehavior(application);
		application.invoke(new Message("xkpr://library/scan"));
	]]></script>
    
</program>
