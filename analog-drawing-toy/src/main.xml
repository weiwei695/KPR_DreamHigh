<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<program xmlns="http://www.kinoma.com/kpr/1">


    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- HANDLERS -->
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
    <handler path="/potResult">
    	<behavior><![CDATA[
			function onInvoke( handler, message ){
				application.distribute( "receiveReading", message.requestObject );
			}
		]]></behavior>
    </handler>
    
	<handler path="/accelResult">
    	<behavior><![CDATA[
			function onInvoke( handler, message ){
				application.distribute( "receiveAccelReading", message.requestObject );
			}
		]]></behavior>
    </handler>
    
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- LAYOUT -->
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->  
      
    <container id = "MainContainer" top = "0" left = "0" bottom = "0" right = "0" />
    
	<canvas id="MainCanvas" top="10" left="10" bottom="10"
        right="10">
        <behavior>
            <method id="onDisplaying" params="content"><![CDATA[
            	this.canvas = content;
            	this.newPoint = true;
            	this.lastX = false;
            	//start asking for readings once the canvas is loaded 
				application.invoke( new MessageWithObject( "pins:/potentiometers/read?repeat=on&callback=/potResult&interval=70" ) );
				application.invoke( new MessageWithObject( "pins:/accelerometer/read?repeat=on&callback=/accelResult&interval=70" ) );
                this.clear();
			]]></method>
			
            <method id="clear" params="content"><![CDATA[
				var ctx = this.canvas.getContext( "2d" );
				var w = this.canvas.width;
                var h = this.canvas.height;
      	        ctx.fillStyle = "black";
				ctx.fillRect( 0,0,w,h );
				this.newPoint = true;
			]]></method>
			
			<method id="receiveReading" params="params, data"><![CDATA[
                if ( this.newPoint ){
                	this.startLine( { x: data.xPos, y: data.yPos } );
                }
                else {
                	this.lineTo( { x: data.xPos, y: 1 - data.yPos } );
                } 
            ]]></method>
            
            <method id="startLine" params="params"><![CDATA[
            	var ctx = this.canvas.getContext( "2d" );
				var w = this.canvas.width;
                var h = this.canvas.height;
                ctx.strokeStyle = "white";
                ctx.lineWidth = 2;
                ctx.moveTo( params.x*w, params.y*h ); 
                ctx.beginPath();
                this.newPoint = false; 
			]]></method>
			
            <method id="lineTo" params="params"><![CDATA[
                var ctx = this.canvas.getContext( "2d" );
				var w = this.canvas.width;
                var h = this.canvas.height;
                ctx.strokeStyle = "white";
                ctx.lineWidth = 2;
                ctx.lineTo( params.x*w, params.y*h ); 
				ctx.stroke();
            ]]></method>
            
            <method id="receiveAccelReading" params="params, data"><![CDATA[
                var threshold = .001; 
                if ( !this.lastX ) {
					this.lastX = data.x;
                	this.lastY = data.y;
                	this.lastZ = data.z;
                }
                else if ( ( Math.abs( data.x - this.lastX ) > threshold ) && 
                	( Math.abs( data.y - this.lastY ) > threshold )  &&
                	( Math.abs( data.z - this.lastZ ) > threshold ) )  {
                		this.clear();
                }
                this.lastX = data.x;
                this.lastY = data.y;
                this.lastZ = data.z;
            ]]></method>
     
        </behavior>
    </canvas>
    
	<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- SCRIPTS -->
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->  
    
    <script><![CDATA[
        var mainCanvas = new MainCanvas();
        application.add( mainCanvas );
        
		application.invoke( new MessageWithObject( "pins:configure", {
            potentiometers: {
                require: "potentiometers",
                pins: {
					xPos: { pin: 64 },
					yPos: { pin: 53 },
                }
            },
            accelerometer: {
                require: "accelerometer",
                pins: {
                    x: { pin: 48 }, 
					y: { pin: 47 }, 
					z: { pin: 43 } 
                }
            }
        }));
    ]]></script>
</program>