<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">

	<require path="themes/sample/theme" id="THEME"/>
	<require path="mobile/scroller" id="SCROLLER"/>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- ASSETS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
	<skin id="whiteSkin" color="white"/>
	<skin id="maskSkin" color="#7f000000"/>
	
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- STYLES -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<style id="noServersStyle" font="18px" color="black" align="center,middle"/>
	<style id="colorStyle" font="bold 18px" color="white" align="center,middle"/>
	
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- BEHAVIORS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
	<handler path="/discover">
		<behavior>
			<method id="onComplete" params="handler, message, json"><![CDATA[
				var query = parseQuery(message.query);
				var server = model.getServer(query.uuid);
				server.color = json.color;
				application.distribute("onDevicesChanged");
			]]></method>
			<method id="onInvoke" params="handler, message"><![CDATA[
				var discovery = JSON.parse(message.requestText);
				var uuid = discovery.uuid;
				var servers = model.servers;
				var serversTable = model.serversTable;
				var server = new Server(discovery);
				serversTable[uuid] = servers.length;
				servers.push(server);
				var message = server.createMessage("color", { uuid: uuid });
				handler.invoke(message, Message.JSON);
			]]></method>
		</behavior>
	</handler>

	<handler path="/forget">
		<behavior>
			<method id="onInvoke" params="handler, message"><![CDATA[
				var discovery = JSON.parse(message.requestText);
				var uuid = discovery.uuid;
				var servers = model.servers;
				var serversTable = model.serversTable;
				if (uuid in serversTable) {
					var index = serversTable[uuid];
					var server = servers[index];
					delete serversTable[uuid];
					servers.splice(index, 1);
					application.distribute("onDevicesChanged");
				}
			]]></method>
		</behavior>
	</handler>

	<behavior id="ApplicationBehavior">
		<method id="onLaunch" params="application"><![CDATA[
			this.servers = [];
			this.serversTable = {};
		]]></method>
		<method id="onDisplayed" params="application"><![CDATA[
			application.discover("discoveryserver.example.kinoma.marvell.com");
		]]></method>
		<method id="onQuit" params="application"><![CDATA[
			application.forget("discoveryserver.example.kinoma.marvell.com");
		]]></method>
		<method id="getServer" params="uuid"><![CDATA[
			return this.servers[this.serversTable[uuid]];
		]]></method>
	</behavior>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- LAYOUTS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<label id="NoServersLine" top="40" style="noServersStyle" string="'No servers'"/>

	<container id="ServerContainer" width="110" height="110">
		<container width="100" height="100" skin="new Skin( $.server.color )">
			<text left="0" right="0" bottom="0" skin="maskSkin">
				<block style="colorStyle" string="$.server.color"/>
			</text>
		</container>
	</container>

	<container id="MainContainer" left="0" right="0" top="0" bottom="0" skin="whiteSkin">
		<scroller like="SCROLLER.VerticalScroller">
			<column left="0" right="0" top="0">
				<behavior>
					<method id="onCreate" params="column, data"><![CDATA[
						this.onDevicesChanged( column );
					]]></method>	
					<method id="onDevicesChanged" params="column"><![CDATA[
						column.empty();
						this.build( column );
					]]></method>	
					<method id="build" params="column"><![CDATA[
						var servers = model.servers;
						if ( !servers || ( 0 == servers.length ) )
							column.add( new NoServersLine );
						else {
							for ( var i = 0; i < servers.length; ++i )
								column.add( new ServerContainer( { server: servers[ i ] } ) );
						}
					]]></method>	
				</behavior>
			</column>
		</scroller>
	</container>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- MODEL -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<script><![CDATA[
		var Server = function(discovery) {
			this.url = discovery.url;
			this.id = discovery.id;
			this.protocol = discovery.protocol;
			this.uuid = discovery.uuid;
			this.color = "";
		};
		Server.prototype = Object.create(Object.prototype, {
			url: { value: undefined, enumerable: true, writable: true },
			id: { value: undefined, enumerable: true, writable: true },
			protocol: { value: undefined, enumerable: true, writable: true },
			uuid: { value: undefined, enumerable: true, writable: true },
			createMessage: { value:
				function(name, query) {
					var url = this.url + name;
					if (query)
						url += "?" + serializeQuery(query);
					return new Message(url);
				}
			}
		});
		var model = application.behavior = new ApplicationBehavior();
		application.add( new MainContainer( {} ) );
	]]></script>
</program>