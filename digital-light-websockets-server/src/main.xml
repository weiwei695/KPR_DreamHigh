<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">

<!--
  This server supports multiple clients and keeps them all 
  in sync with the current state of the led.
-->

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- ASSETS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
	<skin id="whiteSkin" color="white"/>  
	
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- STYLES -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<style id="titleStyle" font="36px" color="black" align="center,middle"/>
	
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- HANDLERS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
	<handler path="/info">
		<behavior>
			<method id="onInvoke" params="handler, message"><![CDATA[
				message.responseText = JSON.stringify( { port: serverPort, name: serverName, lightState: lightState } );            
			]]></method>
		</behavior>
	</handler>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- BEHAVIORS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
	<behavior id="ApplicationBehavior">
		<method id="onLaunch" params="application"><![CDATA[
			application.shared = true;
		]]></method>
		<method id="onQuit" params="application"><![CDATA[
			application.shared = false;
		]]></method>
		<method id="ON" params="container"><![CDATA[
            application.invoke( new MessageWithObject( "pins:/light/turnOn" ) );   
			for ( i = 0; i < clients.length; i++ ) {			
				clients[ i ].send( "lightIsOn" );
			}
			lightState = "lightIsOn";
        ]]></method>
        <method id="OFF" params="container"><![CDATA[
            application.invoke( new MessageWithObject( "pins:/light/turnOff" ) );	 
			for ( i = 0; i < clients.length; i++ ) {			
				clients[ i ].send( "lightIsOff" );
			}
			lightState = "lightIsOff";
        ]]></method>
	</behavior>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- LAYOUTS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<container id="MainContainer" left="0" right="0" top="0" bottom="0" skin="whiteSkin">
		<label left="0" right="0" top="0" bottom="0" style="titleStyle" string="$.title"/>
	</container>
	
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- MODEL -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<script><![CDATA[
		application.behavior = new ApplicationBehavior();
		
		var lightState = "lightIsOff";
	
		//Initialize bll with led.
		application.invoke( new MessageWithObject( "pins:configure", {
            light: {
                require: "led",
                pins: {
                    led: { pin: 59 }
                }
            }
        }));
	
		var clients = [];
		var serverPort = 9300; 
		var serverName = "Server #" + serverPort;
		
		var server = new WebSocketServer( serverPort );
		server.onlaunch = function() {
		};
		server.onconnect = function(conn, options) {
			clients.push( conn );
			
			conn.onopen = function() {
			};
	
			conn.onmessage = function( e ) {
				//e.data == name of method to call
				application.distribute( e.data );
			};
	
			conn.onclose = function( e ) {	
				clients.splice( clients.indexOf(this), 1 );
			};  
	
			conn.onerror = function( e ) {
				conn.close();
			};
		};
		
		application.add( new MainContainer( { title: "Light switch server!" } ) );
	]]></script>
</program>