<?xml version="1.0" encoding="utf-8"?>
<!--
|     Copyright (C) 2002-2015 Kinoma, Inc.
|
|     All rights reserved.
|
|
|
|
|
|
|
|
|
|
|
-->
<module xmlns="http://www.kinoma.com/kpr/1">

	<behavior id="CircleSliderBehavior"><![CDATA[

		function getMax( canvas ) {
			return this.data.max;
		}

		function getMin( canvas ) {
			return this.data.min;
		}

		function getOffset( canvas, size ) {
			var min = this.getMin( canvas );
			var max = this.getMax( canvas );
			var value = this.getValue( canvas );
			return Math.round( ( ( value - min ) * size ) /
				( max - min ) );
		}

		function getValue( canvas ) {
			return this.data.value;
		}

		function onCreate( canvas, data ) {
			this.data = data;
			this.tracking = false;
		}

		function onDisplaying( canvas ) {
			this.size = ( canvas.width - canvas.height );
			this.redraw( canvas );
		}

		function onTouchBegan( canvas, id, x, y, ticks ) {
			canvas.captureTouch( id, x, y, ticks );
			this.tracking = true;
			this.onTouchMoved( canvas, id, x, y, ticks );
		}

		function onTouchEnded( canvas, id, x, y, ticks ) {
			this.tracking = false;

			canvas.container.distribute( "onChanged", this.getValue(),
				this.data.label );
		}

		function onTouchMoved( canvas, id, x, y, ticks ) {
			var offset = this.positionToOffset(canvas, x);
			this.setOffset( canvas, offset );
			this.redraw( canvas );
		}

		function redraw( canvas ) {
			var ctx = canvas.getContext( "2d" );
			var width = canvas.width - 2;
			var height = canvas.height;
			var size = ( width - ( this.data.radius * 2 ) );
			var x = this.data.radius;
			var y = height >> 1;
			var delta = height / 3;

			ctx.lineWidth = this.data.strokeWidth;
			ctx.clearRect( 0, 0, width + 2, height );
			ctx.beginPath();
			ctx.moveTo( x, y );
			ctx.lineTo( width - x, y );
			ctx.strokeStyle = this.data.strokeColor;
			ctx.stroke();
			x = x + this.getOffset( canvas, size );

			ctx.beginPath();
			ctx.arc( x, y, this.data.radius, 0, 360 );
			ctx.fillStyle = this.data.circleColor;
			ctx.fill();
		}

		function positionToOffset(canvas, x) {
			var offset = ( x - ( canvas.height >> 1 ) - canvas.x );
			return offset;
		}

		function setOffset( canvas, offset ) {
			var min = this.getMin( canvas );
			var max = this.getMax( canvas );
			var value = min + ( ( offset * (max - min) ) / this.size );
			if ( value < min ) {
				value = min;
			}
			else if ( value > max ) {
				value = max;
			}
			this.data.value = value;
		}

		function setValue( canvas, value ) {
			if (this.tracking) return;
			this.data.value = value;
			this.redraw( canvas );
		}
	]]></behavior>

	<canvas id = "CircleSlider" behavior = "CircleSliderBehavior"
		active = "true" />

</module>


