<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<program xmlns="http://www.kinoma.com/kpr/1">
    
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- HANDLERS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->		

    <handler path="/gotAnalogResult">
    	<behavior><![CDATA[
        	function onInvoke( handler, message ){
        		var result = message.requestObject;  
        		application.distribute( "onAnalogValueChanged", result ); 		
        	}
        ]]></behavior>
    </handler>
    
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- LAYOUTS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->  
    
   <container id="MainContainer" top="0" left="0" bottom="0" right="0">
        <skin color="white"/>
        <label left="0" right="0" string="'- - -'">
            <style font="46px" color="black"/>
            <behavior>
                <method id="onAnalogValueChanged" params="content, result"><![CDATA[
                      content.string = result.toString().substring( 0, 8 );
				]]></method>
            </behavior>
        </label>
    </container>
    
    <script><![CDATA[
        /* Create message for communication with hardware pins.
    	   analogSensor: name of pins object, will use later for calling 'analogSensor' methods.
    	   require: name of js or xml bll file.
    	   pins: initializes 'analog' (matches 'analog' object in the bll)
    	  	   	 with the given pin numbers. Pin types and directions
    	  		 are set within the bll.	*/
		application.invoke( new MessageWithObject( "pins:configure", {
        	analogSensor: {
                require: "analog",
                pins: {
                    analog: { pin: 52 }
                }
            }
        }));
    	
    	/* Use the initialized analogSensor object and repeatedly 
    	   call its read method with a given interval.  */
		application.invoke( new MessageWithObject( "pins:/analogSensor/read?" + 
			serializeQuery( {
				repeat: "on",
				interval: 20,
				callback: "/gotAnalogResult"
		} ) ) );

		application.add( new MainContainer() );           
    ]]></script>
</program>