<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">
    
    <require path="themes/sample/theme" id="THEME"/>
    <require path="mobile/scroller" id="SCROLLER"/>
    <require path="mobile/control" id="CONTROL"/>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- ASSETS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<skin id="blackSkin" color="black"/>
	<texture id="toolsTexture" small="./assets/tools.png"/>
	<skin id="toolsSkin" texture="toolsTexture" x="0" y="0" width="32" height="32">
		<states offset="32"/>
	</skin>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- STYLES -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<style id="textLineStyle" font="20px" color="#afff51" align="left"/>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- LAYOUTS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<container id="ExitButton" left="0" top="0" active="true">
		<behavior like="CONTROL.ButtonBehavior">
			<method id="onTap" params="container"><![CDATA[
				application.invoke(new Message("xkpr://shell/close?id=" + application.id));
			]]></method>	
		</behavior>
		<content skin="toolsSkin"/>
	</container>

	<container id="MainContainer" left="0" right="0" top="0" bottom="0" skin="blackSkin">
		<behavior>
			<method id="onDisplayed" params="container"><![CDATA[
				fileReadWrite();
				directoryOperations();
				chunkOperations();
				jsonOperations();
				xmlOperations();
				directoryIterator();
			]]></method>
		</behavior>                
		<scroller anchor="SCROLLER" left="0" right="0" top="0" bottom="0" like="SCROLLER.VerticalScroller">
			<text left="5" right="5" top="5" style="textLineStyle">
				<behavior>
					<method id="onCreate" params="text, data"><![CDATA[
						text.string = "***** Files and Chunks Example *****\n";
					]]></method>
					<method id="onLog" params="text, string"><![CDATA[
						text.string += string + "\n";
					]]></method>
				</behavior>                
			</text>
			<content like="SCROLLER.VerticalScrollbar"/>
		</scroller>
		<container like="ExitButton"/>
	</container>
    
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- SCRIPTS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
	<script><![CDATA[
	    application.add( new MainContainer( {} ) );
	    
	    var fileReadWrite = function() {
	    	try {
	    		var path1 = mergeURI(application.url, "./assets/lorem.txt");
	    		var info = Files.getInfo(path1);
	    		if (info.type != Files.fileType)
	    			throw("FAIL");
	    		var string1 = Files.readText(path1);
	    		var path2 = mergeURI(Files.temporaryDirectory, "./lorem.txt");
	    		Files.writeText(path2, string1);
	    		var string2 = Files.readText(path2);
	    		if (string1 != string2)
	    			throw("FAIL");
	    		Files.appendText(path2, "**appended**");
	    		var string2 = Files.readText(path2);
	    		if (string1 + "**appended**" != string2)
	    			throw("FAIL");
	    		Files.deleteFile(path2);
	    		log("fileReadWrite PASS");
	    	}
	    	catch (e) {
	    		log("fileReadWrite FAIL");
	    	}
	    }
	    var directoryOperations = function() {
	    	try {
	    		var path1 = mergeURI(Files.temporaryDirectory, "example/");
	    		Files.ensureDirectory(path1);
	    		if (!Files.exists(path1))
	    			throw("FAIL");
	    		var info = Files.getInfo(path1);
	    		if (info.type != Files.directoryType)
	    			throw("FAIL");
	    		Files.renameDirectory(path1, "example2");
	    		var path2 = mergeURI(Files.temporaryDirectory, "example2/");
	    		if (Files.exists(path1))
	    			throw("FAIL");
	    		if (!Files.exists(path2))
	    			throw("FAIL");
	    		Files.deleteDirectory(path2);
	    		if (Files.exists(path2))
	    			throw("FAIL");
	    		log("directoryOperations PASS");
	    	}
	    	catch (e) {
	    		log("directoryOperations FAIL");
	    	}
	    }
	    var chunkOperations = function() {
	    	try {
	    		var path = mergeURI(Files.temporaryDirectory, "chunks/");
	    		Files.ensureDirectory(path);
	    		if (!Files.exists(path))
	    			throw("FAIL");
	    		var path1 = mergeURI(path, "./chunk");
	    		var chunk1 = new Chunk(10);
	    		for (var i = 0; i < 10; ++i)
	    			chunk1.poke(i, i);
	    		Files.writeChunk(path1, chunk1);
	    		var chunk2 = Files.readChunk(path1);
	    		for (var i = 0; i < 10; ++i) {
	    			if (chunk2.peek(i) != chunk1.peek(i))
	    				throw("FAIL");
	    		}
	    		var chunk3 = new Chunk(10);
	    		for (var i = 10; i < 20; ++i)
	    			chunk3.poke(i - 10, i);
	    		Files.appendChunk(path1, chunk3);
	    		var chunk4 = Files.readChunk(path1);
	    		if (chunk4.length != chunk1.length + chunk3.length)
	    			throw("FAIL");
	    		for (var i = 0, c = chunk4.length; i < c; ++i) {
	    			if (chunk4.peek(i) != i)
	    				throw("FAIL");
	    		}
	    		var path3 = mergeURI(application.url, "./assets/lorem.txt");
	    		var string1 = Files.readText(path3);
	    		Files.writeText(path1, string1);
	    		var chunk5 = Files.readChunk(path1);
	    		var string2 = decodeBase64(chunk5);
	    		if (string1 != string2)
	    			throw("FAIL");
	    		chunk1.free();
	    		chunk2.free();
	    		chunk3.free();
	    		chunk4.free();
	    		chunk5.free();
	    		Files.deleteFile(path1);
	    		log("chunkOperations PASS");
	    	}
	    	catch (e) {
	    		log("chunkOperations FAIL");
	    	}
	    }
	    var jsonOperations = function() {
	    	try {
	    		var path1 = mergeURI(Files.temporaryDirectory, "example.json");
	    		Files.ensureDirectory(path1);
	    		var item1 = {fruit: "apple", color: "red"};
	    		Files.writeJSON(path1, item1);
	    		var item2 = Files.readJSON(path1);
	    		if (item1.fruit != item2.fruit || item1.color != item2.color)
	    			throw("FAIL");
	    		Files.deleteFile(path1);
	    		log("jsonOperations PASS");
	    	}
	    	catch (e) {
	    		log("jsonOperations FAIL");
	    	}
	    }
	    var xmlOperations = function() {
	    	try {
	    		var path1 = mergeURI(application.url, "./assets/person.xml");
	    		var document1 = Files.readXML(path1);
				var node, items = document1.getElementsByTagName("person");
				var name, address, city, state;
				if (items.length > 0) {
					node = items.item(0);
					name = node.getAttribute("name");
					if (!name || (name != "Brian"))
						throw("FAIL");
					items = node.getElementsByTagName("address");
					if (items.length > 0)
						address = items.item(0).firstChild.nodeValue;
					items = node.getElementsByTagName("city");
					if (items.length > 0)
						city = items.item(0).firstChild.nodeValue;
					items = node.getElementsByTagName("state");
					if (items.length > 0)
						state = items.item(0).firstChild.nodeValue;
				}
	    		var path1 = mergeURI(Files.temporaryDirectory, "example.xml");
	    		Files.ensureDirectory(path1);
	    		Files.writeXML(path1, document1);
	    		
	    		var document2 = Files.readXML(path1);
				var node, items = document2.getElementsByTagName("person");
				if (items.length > 0) {
					node = items.item(0);
					if (name != node.getAttribute("name"))
						throw("FAIL");
					items = node.getElementsByTagName("address");
					if (address != items.item(0).firstChild.nodeValue)
						throw("FAIL");
					items = node.getElementsByTagName("city");
					if (city != items.item(0).firstChild.nodeValue)
						throw("FAIL");
					items = node.getElementsByTagName("state");
					if (state != items.item(0).firstChild.nodeValue)
						throw("FAIL");
				}
	    		Files.deleteFile(path1);
	    		log("xmlOperations PASS");
	    	}
	    	catch (e) {
	    		log("xmlOperations FAIL");
	    	}
	    }
	    var directoryIterator = function() {
	    	try {
	    		iterateDirectory(mergeURI(application.url, "../"), 0);
	    		log("directoryIterator PASS");
	    	}
	    	catch (e) {
	    		log("directoryIterator FAIL");
	    	}
	    }
	    var iterateDirectory = function(path, level) {
	    	var space = "";
	    	for (var i = 0; i < 3 * level; ++i)
	    		space += " ";
    		var info, iterator = new Files.Iterator(path);
    		while (info = iterator.getNext()) {
    			log(space + info.path);
				if (Files.directoryType == info.type) {
					iterateDirectory(path + info.path + "/", level + 1);
				}
    		}
	    }
	    var log = function(string) {
	    	application.distribute("onLog", string);
	    }
	]]></script>
    
</program>
