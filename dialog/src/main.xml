<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">
    <require path="mobile/dialog" id="DIALOG"/>
    <require path="mobile/model" id="MODEL"/>
    <require path="themes/sample/theme" id="THEME"/>
    <require path="mobile/keyboard" id="KEYBOARD"/>
    
    <!-- ASSETS -->

    <skin id="backgroundSkin" color="#eee"/>
    <skin id="buttonSkin" color="#ccf"/>
    <skin id="hiliteSkin" color="#88c"/>
    <skin id="dummuSkin" color="red"/>
    
    <style id="headerStyle" font="bold 18px" color="#444" align="center,middle"/>
    <style id="buttonStyle" font="bold 24px" color="blue" align="center,middle"/>
    
    <!-- MODEL -->

    <behavior id="ButtonBehavior">
        <method id="onCreate" params="label">
            label.coordinates = {top:4, bottom:4, left:4, right:4, height:32};
            label.skin = buttonSkin;
            label.style = buttonStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
            label.skin = hiliteSkin;
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = buttonSkin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>

    <container id="MainScreen" top="0" left="0" bottom="0" right="0" skin="backgroundSkin">
        <label top="4" left="0" right="0" string="$.title" style="headerStyle"/>
        
        <column width="300">
            <label string="'Simple Dialog'">
                <behavior like="ButtonBehavior">
                    <method id="onTap" params="label">
                        label.invoke(new Message("/simple?secret=42&amp;greeting=Sayonara"));
                    </method>
                </behavior>
            </label>
            <label string="'Checkbox Sample'">
                <behavior like="ButtonBehavior">
                    <method id="onTap" params="label">
                        label.invoke(new Message("/checkbox"));
                    </method>
                </behavior>
            </label>
            <label string="'Dialog Item Sampler'">
                <behavior like="ButtonBehavior">
                    <method id="onTap" params="label">
                        label.invoke(new Message("/showcase?name2=James%20Bond"));
                    </method>
                </behavior>
            </label>
            <label string="'Busy Dialog'">
                <behavior like="ButtonBehavior">
                    <method id="onTap" params="label">
                        label.invoke(new Message("/busy"));
                    </method>
                </behavior>
            </label>
            <label string="'Progress Bar'">
                <behavior like="ButtonBehavior">
                    <method id="onTap" params="label">
                        label.invoke(new Message("/progressing"));
                    </method>
                </behavior>
            </label>
        </column>
    </container>
    
    <script><![CDATA[
    
    application.behavior = new MODEL.ApplicationBehavior( application );
    
    var data = {
        title: 'dialog maniacs',
    };
    application.add( new MainScreen(data) );
    
    ]]></script>
    
    <!-- Simple Dialog -->

    <handler path="/simple">
        <behavior like="MODEL.DialogBehavior">
            <method id="onDescribe" params="query">
                return {
                    Dialog: DIALOG.Box,
                    title: "What is your name?",
                    action: "/printResult",
                    items: [
                        {
                            Item: DIALOG.Field,
                            id: "first_name",
                            label: "First",
                        },
                        {
                            Item: DIALOG.Field,
                            id: "last_name",
                            label: "Last",
                        },
                        {
                            // This item has not displayed in the dialog,
                            // but the value will be passed to the action.
                            id: "secret",
                        },
                        {
                            Item: DIALOG.Caption,
                            string: query.greeting
                        },
                    ],
                    ok: "OK",
                    cancel: "Cancel",
                };
            </method>
        </behavior>
    </handler>
    
    <!-- Checkbox Dialog -->

    <handler path="/checkbox">
        <behavior like="MODEL.DialogBehavior">
            <method id="onDescribe" params="query">
                return {
                    Dialog: DIALOG.Box,
                    title: "Checkbox Sample",
                    action: "/printResult",
                    items: [
                        {
                            Item: DIALOG.Checkbox,
                            id: "left_check",
                            label: "Left side checkbox",
                        },
                        {
                            Item: DIALOG.CheckboxRight,
                            id: "right_check",
                            label: "Right side checkbox",
                        },
                    ],
                    ok: "OK",
                    cancel: "Cancel",
                };
            </method>
        </behavior>
    </handler>
    
    <!-- Show case -->

    <handler path="/showcase">
        <behavior like="MODEL.DialogBehavior">
            <method id="onDescribe" params="query">
                return {
                    Dialog: DIALOG.Box,
                    items: [
                        {
                            Item: DIALOG.Field,
                            id: "name",
                            label: "Field",
                        },
                        {
                            Item: DIALOG.Field,
                            id: "name2",
                        },
                        {
                            Item: DIALOG.Caption,
                            string: "Initial value is passed by the query",
                        },
                        {
                            Item: DIALOG.Password,
                            id: 'password',
                            label: "PIN",
                        },
                        {
                            Item: DIALOG.Spacer,
                        },
                        {
                            Item: DIALOG.FieldHint,
                            id: "name3",
                            value: "",
                            hint: "Nickname",
                            
                        },
                        {
                            Item: DIALOG.Slider,
                            id: "slider",
                            label: "Score",
                            min: 0,
                            max: 100,
                            value: 0,
                            toString: function(val) { return Math.floor(val); }, 
                        },
                        {
                            Item: DIALOG.Spacer,
                        },
                        {
                            Item: DIALOG.Subtitle,
                            string: "This is Subtitle.",
                        },
                        {
                            Item: DIALOG.Caption,
                            string: "This is Caption.",
                        },
                        {
                            Item: DIALOG.Comment,
                            string: "This is Comment.",
                        },
                    ],
                    ok: "Go!",
                    cancel: "Close",
                    action: "/printResult",
                };
            </method>
        </behavior>
    </handler>

    <!-- Spinner and Busy item -->

    <handler path="/busy">
        <behavior like="MODEL.DialogBehavior">
            <method id="onDescribe" params="query">
                return {
                    Dialog: DIALOG.Box,
                    title: "I am busy.",
                    items: [
                        {
                            Item: DIALOG.Spinner,
                        },
                        {
                            Item: DIALOG.Busy,
                            string: "I said I'm busy!",
                        },
                    ],
                    cancel: "Cancel",
                };
            </method>
        </behavior>
    </handler>
    
    <!-- Progress Bar -->

    <!--
        Some periodical task is needed to change progress bar's value.
        Usually this is your responsibity to prepare this kind of task.
        Actually that task may be the heart of your application, such as
        downloading, compressing or analyzing.

        This is completely dummy task.
        It is here just to waste your devices battery.
    -->
    <content id="Periodical" width="32" height="32" bottom="4" right="4" skin="dummuSkin">
        <behavior>
            <method id="onCreate" params="content, data">
                this.dialog = data.dialog;
                content.duration = data.interval;
            </method>
            <method id="onDisplayed" params="content">
                content.start();
            </method>
            <method id="onFinished" params="content">
                var progressBar = this.dialog.items[1];
                progressBar.value += 0.1;
                progressBar.BAR.delegate("onChanged");

                if (progressBar.value >= 1.0) {
                    // to close dialog with "onCancel" invocation
                    progressBar.BAR.bubble("onCancel");
                } else {
                    // loop again
                    content.time = 0;
                    content.start();
                }
            </method>
        </behavior>
    </content>

    <handler path="/progressing">
        <behavior like="MODEL.DialogBehavior">
            <method id="onDescribe" params="query">
                var data = {
                    Dialog: DIALOG.Box,
                    items: [
                        {
                            Item: DIALOG.Comment,
                            string: "Wasting your battery...",
                        },
                        {
                            // This is the progress bar data.
                            // After dialog is instanciated, this object has
                            // reference slot to the bar object with a name "BAR".
                            Item: DIALOG.ProgressBar,
                            value: -0.3, // negative value displays barber pole.
                        },
                    ],
                    cancel: "Stop!",
                };

                var dummy_task = new Periodical({interval: 500, dialog: data});
                dummy_task.start();
                application.add(dummy_task);

                // keep the reference for the task to clean it up later.
                data.dummy_task = dummy_task;

                return data;
            </method>
            <method id="onCancel" params="dialog">
                var dummy_task = this.data.dummy_task;
                dummy_task.stop();

                application.remove(dummy_task);
            </method>
        </behavior>
    </handler>

    <handler path="/printResult">
        <behavior like="MODEL.CommandBehavior">
            <method id="onQuery" params="handler, query">
                for (var key in query) {
                    trace(key + ": " + query[key] + "\n");
                }
            </method>
        </behavior>
    </handler>
</program>
