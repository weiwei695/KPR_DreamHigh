<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">

	<require path="themes/sample/theme" id="THEME"/>
	<require path="mobile/control" id="CONTROL"/>
	<require path="mobile/scroller" id="SCROLLER"/>
	<require path="mobile/keyboard" id="KEYBOARD"/>
	<require path="mobile/dialog" id="DIALOG"/>
	<require path="mobile/model" id="MODEL"/>
	<require path="mobile/screen" id="SCREEN"/>
	<require path="mobile/tool" id="TOOL"/>
	<require path="transitions" id="TRANSITIONS"/>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- ASSETS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
	<skin id="whiteSkin" color="white"/>
	<skin id="maskSkin" color="#7f000000"/>
	<skin id="itemSkin">
		<states colors="#515153,#2ea7cb"/>
		<borders left="0" right="0" top="0" bottom="1"
            color="#cccccc"/>
    </skin>
    
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- STYLES -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<style id="noServersStyle" font="18px" color="black" align="center,middle"/>
	<style id="titleStyle" font="bold 24px" color="white" align="left,middle"/>
	<style id="urlStyle" font="18px" color="white" align="left,middle"/>
	
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- BEHAVIORS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
	<handler path="/discover">
		<behavior>
			<method id="onComplete" params="container, message, json"><![CDATA[
				var query = parseQuery(message.query);
				var server = model.getServer(query.uuid);
				server.update(json);
				application.distribute("onDevicesChanged");
			]]></method>
			<method id="onInvoke" params="handler, message"><![CDATA[
				var discovery = JSON.parse(message.requestText);
				var servers = model.servers;
				var serversTable = model.serversTable;
				var uuid = discovery.uuid;
				if (!(uuid in serversTable)) {
					var server = new Server(discovery);
					var message = server.createMessage("info", { uuid: server.uuid });
					handler.invoke(message, Message.JSON);
					serversTable[uuid] = servers.length;
					servers.push(server);
				}
			]]></method>
		</behavior>
	</handler>

	<handler path="/forget">
		<behavior>
			<method id="onInvoke" params="handler, message"><![CDATA[
				var discovery = JSON.parse(message.requestText);
				var servers = model.servers;
				var serversTable = model.serversTable;
				var uuid = discovery.uuid;
				if (uuid in serversTable) {
					servers.splice(serversTable[uuid], 1);
					delete serversTable[uuid];
					application.distribute("onDevicesChanged");
				}
			]]></method>
		</behavior>
	</handler>

	<behavior id="ApplicationBehavior">
		<method id="onLaunch" params="application"><![CDATA[
			this.servers = [];
			this.serversTable = {};
		]]></method>
		<method id="onDisplayed" params="application"><![CDATA[
			application.discover("websocketserver.example.kinoma.marvell.com");
		]]></method>
		<method id="onQuit" params="application"><![CDATA[
			application.forget("websocketserver.example.kinoma.marvell.com");
		]]></method>
		<method id="getServer" params="uuid"><![CDATA[
			return this.servers[this.serversTable[uuid]];
		]]></method>
	</behavior>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- LAYOUTS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<label id="NoServersLine" top="40" style="noServersStyle" string="'No servers'"/>

	<container id="ServerContainer" skin="itemSkin" left="0" right="0" height="44" active="true">
		<behavior like="SCREEN.ListItemBehavior"><![CDATA[
			function onCreate(container, data) {
				this.server = data.server;
			}
			
			function onTap(container) {
				this.changeState(container, 0);
				
				var chatRoom = new ChatRoom({ server:this.server });
				application.run( new TRANSITIONS.Flip(), application.first, chatRoom, { direction : "left" } );
			}
		]]></behavior>
		<text left="0" right="0">
			<block style="titleStyle" string="$.server.name"/>
			<block style="urlStyle" string="$.server.url"/>
		</text>
	</container>

	<container id="MainContainer" left="0" right="0" top="0" bottom="0" skin="whiteSkin">
		<scroller like="SCROLLER.VerticalScroller">
			<column left="0" right="0" top="0">
				<behavior>
					<method id="onCreate" params="column, data"><![CDATA[
						this.onDevicesChanged( column );
					]]></method>	
					<method id="onDevicesChanged" params="column"><![CDATA[
						column.empty();
						this.build( column );
					]]></method>	
					<method id="build" params="column"><![CDATA[
						var servers = model.servers;
						if ( !servers || ( 0 == servers.length ) )
							column.add( new NoServersLine );
						else {
							for ( var i = 0; i < model.servers.length; ++i )
								column.add( new ServerContainer( { server: model.servers[ i ] } ) );
						}
					]]></method>	
				</behavior>
			</column>
		</scroller>
	</container>

	<line id="InputField" left="0" right="0" height="44" bottom="0" active="true">
		<label left="0" top="0" bottom="0" style="THEME.dialogLabelStyle" string="$.label"/>
		<container left="0" right="10" top="5" bottom="5" skin="THEME.fieldScrollerSkin">
			<scroller left="0" right="30" top="0" bottom="0" clip="true" active="true" behavior="CONTROL.FieldScrollerBehavior">
				<label left="0" top="0" bottom="0" editable="true" skin="THEME.fieldLabelSkin" style="THEME.fieldLabelStyle" string="$.value">
					<behavior like="CONTROL.FieldLabelBehavior">
						function onEdited(label) {
							var string = label.string;
							label.container.next.visible = string.length > 0;
							label.bubble("onChanged", string);
						}
						function onFocused(label) {
							CONTROL.FieldLabelBehavior.prototype.onFocused.call(this, label);
							//label.container.next.active = true;
						}
						function onUnfocused(label) {
							//label.container.next.active = false;
							CONTROL.FieldLabelBehavior.prototype.onUnfocused.call(this, label);
						}
						function onKeyDown(label, key, repeat, ticks) {
							if (key) {
								var code = key.charCodeAt(0);
								if (code == 3 /* enter */ || code == 13 /* return */) {
									var string = label.string;
									label.bubble("onCommit", string);
									label.string = "";
								} else {
									CONTROL.FieldLabelBehavior.prototype.onKeyDown.call(this, label, key, repeat, ticks);
								}
							}
						}
					</behavior>
				</label>
			</scroller>
			<content right="-5" top="0" bottom="0" skin="THEME.fieldDeleterSkin" active="true" behavior="CONTROL.FieldDeleterBehavior"/>
		</container>
		<label right="0" top="0" bottom="0" style="THEME.dialogLabelStyle" string="'Send'" active="true">
			<behavior like="CONTROL.ButtonBehavior"><![CDATA[
				function onTap(label) {
					var field = label.previous.first.first;
					label.bubble("onCommit", field.string);
					field.string = "";
				}
			]]></behavior>
		</label>
	</line>

	<container id="ChatRoom" left="0" right="0" top="0" bottom="0" skin="whiteSkin">
		<behavior><![CDATA[
			function onCreate(container, data) {
				this.server = data.server;

				var field = new InputField({label:"Name", value:""});
				container.add(field);

				this.STAGE = container.first.next.first;
				
				this.conn = this.doConnect(this.server.url);;
				this.nameDefined = false;
				this.FIELD = field;
				this.FIELD_LABEL = field.first;
				this.FIELD_VALUE = field.first.next.first.first;
				
				this.FIELD_VALUE.active = false;
				this.FIELD_VALUE.string = "connecting";
			}

			function onCommit(container, string) {
				// first line must be name of the user
				if (!this.nameDefined)
					this.user = string;
				
				this.conn.send(string);
			}

			function doConnect(url) {
				var conn = new WebSocket(url);
				var self = this;

				conn.onopen = function() {
					self.FIELD_LABEL.string = "Name?";
					
					self.FIELD_VALUE.active = true;
					self.FIELD_VALUE.string = "";
				};

				conn.onmessage = function(e) {
					var message = JSON.parse(e.data);

					switch (message.type) {
						case 'history':
							self.onHistory(message.data);
							break;
						case 'color':
							self.onLoginSuccess(message.data);
							break;
						case 'message':
							self.onReceive(message.data);
							break;
					}
				};

				conn.onclose = function(e) {
				};

				conn.onerror = function(e) {
				};
				
				return conn;
			}

			function onLoginSuccess(color) {
				this.FIELD_LABEL.string = this.user;
				this.FIELD_LABEL.style = new Style("20px Arial", color);
				this.nameDefined = true;
			}

			function onReceive(message) {
				var name = message.author;
				var color = message.color;
				var text = message.text;

				var block = new Text({left: 4, right: 4, top: 0});
				block.string = name + ': ' + text;
				block.style = new Style("18px Arial", color);

				if (this.STAGE.first) {
					this.STAGE.insert(block, this.STAGE.first);
				} else {
					this.STAGE.add(block);
				}
			}

			function onHistory(messages) {
				for (var i = 0, c = messages.length; i < c; i++) {
					this.onReceive(messages[i]);
				}
			}

		]]></behavior>
		<text left="0" right="0" top="0" height="44" skin="itemSkin">
			<block style="titleStyle" string="$.server.name"/>
			<block style="urlStyle" string="$.server.url"/>
		</text>
		<scroller like="SCROLLER.VerticalScroller" left="0" right="0" top="44" bottom="44" clip="true" active="true">
			<column left="0" right="0" top="0"/>
		</scroller>
	</container>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- MODEL -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<script><![CDATA[
		var Server = function(discovery) {
			this.location = discovery.url;
			this.type = discovery.id;
			this.uuid = discovery.uuid;
			this.name = "- Untitled -";
			this.port = undefined;
		};
		Server.prototype = Object.create(Object.prototype, {
			location: { value: undefined, enumerable: true, writable: true },
			type: { value: undefined, enumerable: true, writable: true },
			uuid: { value: undefined, enumerable: true, writable: true },
			name: { value: undefined, enumerable: true, writable: true },
			port: { value: undefined, enumerable: true, writable: true },
			url: { value: undefined, enumerable: true, writable: true },
			conn: { value: undefined, enumerable: true, writable: true },
			createMessage: { value:
				function(name, query) {
					var url = this.location + name;
					if (query)
						url += "?" + serializeQuery(query);
					return new Message(url);
				}
			},
			update: { value:
				function(json) {
					this.name = json.name;
					this.port = json.port;
					
					this.url = 'ws:' + this.location.split(':')[1] + ':' + this.port;
				}
			}
		});
		
		var model = application.behavior = new ApplicationBehavior();
		application.add( new MainContainer( {} ) );
	]]></script>
</program>