<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">
	<require path="themes/sample/theme" id="THEME"/>
	<require path="mobile/control" id="CONTROL"/>
	<require path="mobile/dialog" id="DIALOG"/>
	<require path="mobile/keyboard" id="KEYBOARD"/>
	<require path="mobile/model" id="MODEL"/>
	<require path="mobile/screen" id="SCREEN"/>
	<require path="mobile/scroller" id="SCROLLER"/>
	<require path="mobile/tool" id="TOOL"/>
	<require path="locale" id="LOCALE"/>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- ASSETS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<texture id="applicationIconTexture" small="assets/icon.png"/>
	<skin id="applicationIconSkin" texture="applicationIconTexture" x="0" y="0" width="80" height="80" aspect="fit"/>
	<skin id="blackSkin" color="black"/>
	<skin id="whiteSkin" color="white"/>
	<skin id="separatorSkin" color="silver"/>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- STYLES -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<style id="itemNameStyle" font="bold" lines="1"/>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- HANDLERS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<handler path="/iterateDirectory">
		<behavior like="MODEL.CommandBehavior"><![CDATA[
			function onQuery(handler, query) {
				var items = [];
				try {
					var iterator = new Files.Iterator(query.path);
					while (info = iterator.getNext())
						items.push(info);
				}
				catch (e) {
				}
				handler.message.responseText = JSON.stringify(items);
			}
		]]></behavior>
	</handler>

	<handler path="/directory">
		<behavior like="MODEL.ScreenBehavior"><![CDATA[
			function hasSelection(data, delta) {
				var selection = data.selection + delta;
				return (0 <= selection) && (selection < data.items.length)
			}
			function getSelection(data, delta) {
				data.selection += delta;
				return data.items[data.selection];
			}
			function onDescribe(query, selection) {
				var path = selection.path + selection.name + "/";
				var title = (0 == path.indexOf("file://")) ? path.slice(7) : path;
				return {
					Screen: DirectoryScreen,
					title: title,
					items: null,
					more: false,
					path: path,
					scroll: {
						x: 0,
						y: 0
					},
					selection: -1,
				};
			}
		]]></behavior>
	</handler>

	<handler path="/file">
		<behavior like="MODEL.ScreenBehavior"><![CDATA[
			function hasSelection(data, delta) {
				var selection = data.selection + delta;
				return (0 <= selection) && (selection < data.items.length)
			}
			function getSelection(data, delta) {
				data.selection += delta;
				return data.items[data.selection];
			}
			function onDescribe(query, selection) {
				return {
					Screen: FileScreen,
					title: selection.name,
					path: selection.path + selection.name,
					extension: selection.extension,
					scroll: {
						x: 0,
						y: 0
					},
					selection: -1,
				};
			}
		]]></behavior>
	</handler>

	<handler path="/main">
		<behavior like="MODEL.ScreenBehavior"><![CDATA[
			function hasSelection(data, delta) {
				var selection = data.selection + delta;
				return (0 <= selection) && (selection < data.items.length)
			}
			function getSelection(data, delta) {
				data.selection += delta;
				return data.items[data.selection];
			}
			function onDescribe(query, selection) {
				var title = (0 == model.root.indexOf("file://")) ? model.root.slice(7) : model.root;
				return {
					Screen: MainScreen,
					title: title,
					items: null,
					more: false,
					path: model.root,
					scroll: {
						x: 0,
						y: 0
					},
					selection: -1,
				}
			}
		]]></behavior>
	</handler>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- BEHAVIORS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<behavior id="FileListBehavior" like="SCREEN.ListBehavior"><![CDATA[
		function addItemLine(list, item) {
			list.add(new FileLine(item));
		}
		function createMessage(list, data) {
			var message = new Message("/iterateDirectory?path=" + encodeURIComponent(data.path));
			return message;
		}
		function getItems(list, message, results) {
			var data = this.data;
			var items = [];
			for (var i = 0, c = results.length; i < c; ++i) {
				var item = results[i];
				if (Files.linkType == item.type)
					continue;
				item.name = item.path;
				item.path = data.path;
				if (item.type == Files.fileType) {
					try {
						var dot = item.name.lastIndexOf(".");
						item.extension = (dot > 0) ? item.name.slice(dot + 1) : "";
					}
					catch(e) {
						item.extension = "";
					}
					item.action = "/file";
					item.thumbnail = "./assets/file.png";
					items.push(item);
				}
				else if (item.type == Files.directoryType) {
					item.action = "/directory";
					item.thumbnail = "./assets/folder.png";
					items.push(item);
				}
			}
			return items.length ? items : null;
		}
		function hasMore(list, message, result) {
			return false;
		}
	]]></behavior>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- LAYOUTS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<line id="FileLine" left="0" right="0" active="true" behavior="SCREEN.ListItemBehavior" skin="THEME.lineSkin">
		<column left="0" right="0">
			<line left="0" right="0" height="1" skin="separatorSkin"/>
			<line left="2" right="2" height="52">
				<thumbnail width="40" height="40" url="$.thumbnail"/>
				<text left="4" right="0">
					<block style="itemNameStyle" string="$.name"/>
				</text>
			</line>
		</column>
	</line>

	<media id="AVContainer" left="0" right="0" top="0" bottom="0" url="$">
		<behavior><![CDATA[
			function onLoaded(media) {
				media.start();
				media.bubble("onItemLoaded");
			}
		]]></behavior>
	</media>
	
	<picture id="PictureContainer" left="0" right="0" top="0" bottom="0" url="$">
		<behavior><![CDATA[
			function onLoaded(picture) {
				picture.bubble("onItemLoaded");
			}
		]]></behavior>
	</picture>

	<container id="GenericFileContainer" left="0" right="0" top="0" bottom="0">
		<behavior><![CDATA[
			function onDisplayed(container) {
				container.bubble("onItemLoaded");
			}
		]]></behavior>
	</container>

	<container id="Header" like="SCREEN.EmptyHeader" skin="blackSkin">
		<container like="TOOL.BackButton"/>
		<scroller like="TOOL.HeaderTitle" style="THEME.plainHeaderTitleStyle"/>
	</container>

	<container id="Footer" like="SCREEN.EmptyFooter" skin="blackSkin">
		<line top="0" bottom="0">
			<container like="TOOL.PreviousButton"/>
			<container like="TOOL.NextButton"/>
		</line>
	</container>

	<container id="DirectoryScreen" like="SCREEN.EmptyScreen">
		<container anchor="BODY" like="SCREEN.EmptyBody" skin="whiteSkin">
			<scroller like="SCROLLER.VerticalScroller">
				<column anchor="LIST" left="0" right="0" top="0" behavior="FileListBehavior"/>
				<content like="SCROLLER.VerticalScrollbar"/>
				<content like="SCROLLER.TopScrollerShadow"/>
				<content like="SCROLLER.BottomScrollerShadow"/>
			</scroller>
		</container>
		<container anchor="HEADER" like="Header"/>
		<container anchor="FOOTER" like="Footer"/>
	</container>

	<container id="FileScreen" like="SCREEN.EmptyScreen">
		<container anchor="BODY" like="SCREEN.EmptyBody" bottom="THEME.screenFooterHeight" skin="blackSkin">
			<behavior><![CDATA[
				function onCreate(container, data) {
					this.data = data;
					this.audioExtensions = ["mp3","m4a","wav"];
					this.imageExtensions = ["bmp","gif","jpg","jpeg","png"];
					this.videoExtensions = ["flv","mp4","mov","qt"];
				}
				function onDisplayed(container) {
					var extension = this.data.extension;
					if (this.imageExtensions.some(this.matchExtension, extension))
						container.add(new PictureContainer(this.data.path));
					else if (this.audioExtensions.some(this.matchExtension, extension) || this.videoExtensions.some(this.matchExtension, extension))
						container.add(new AVContainer(this.data.path));
					else
						container.add(new GenericFileContainer(this.data.title));
				}
				function onItemLoaded(container) {
					container.remove(this.data.BUSY);
				}
				function matchExtension(extension) {
					return this.toLowerCase() == extension;
				}
			]]></behavior>
			<content anchor="BUSY" skin="THEME.busySkin" behavior="CONTROL.BusyBehavior"/>
		</container>
		<container anchor="HEADER" like="Header"/>
		<container anchor="FOOTER" like="Footer"/>
	</container>

	<container id="MainScreen" like="SCREEN.EmptyScreen">
		<container anchor="BODY" like="SCREEN.EmptyBody" skin="whiteSkin">
			<scroller like="SCROLLER.VerticalScroller">
				<column anchor="LIST" left="0" right="0" top="0" behavior="FileListBehavior"/>
				<content like="SCROLLER.VerticalScrollbar"/>
				<content like="SCROLLER.TopScrollerShadow"/>
				<content like="SCROLLER.BottomScrollerShadow"/>
			</scroller>
		</container>
		<container anchor="HEADER" like="Header"/>
	</container>
   
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- SCRIPTS -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
	<script><![CDATA[
		var model = application.behavior = new MODEL.ApplicationBehavior(application);
		model.root = ("linux" == system.platform) ? "file:///" : Files.picturesDirectory;
		//model.root = Files.temporaryDirectory;
		//model.root = "/Users/brianfriedkin/Documents/Kinoma Media/";
		//model.root = "file://c:/"
	]]></script>
    
</program>
