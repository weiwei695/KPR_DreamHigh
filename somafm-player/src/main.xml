<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  NOTE:
  
  The web service at http://k3.cloud.kinoma.com/api is operated by the Kinoma team for making music prototypes.
  It is not for commercial or large scale use. It may be modified or discontinued without notice.
-->
<program xmlns="http://www.kinoma.com/kpr/1">	
	<require id="CONTROL" path="mobile/control"/>
   	<require id="LOCALE" path="locale"/>
    <require id="SCROLLER" path="mobile/scroller"/>
	<require id="THEME" path="themes/sample/theme"/>
    
	<style id="applicationStyle" font="18px Fira Sans" color="white" align="left,middle"/>
	<script>
		application.style = applicationStyle;
	</script>
	
	<skin id="blackSkin" color="black"/>
	<skin id="whiteSkin" color="white"/>

	<style id="radioTitleStyle" font="32px Fira Sans Light" align="center,middle" color="white">
	</style>
	<style id="radioChannelStyle" font="36px Fira Sans" align="center,middle" color="white">
		<margins left="15" right="15"/>
	</style>
	<texture id="speakerTexture" small="./assets/speaker.png"/>
	<skin id="speakerSkin" texture="speakerTexture" x="0" y="0" width="40" height="40">
		<variants offset="40"/>
		<states offset="40"/>
	</skin>

	<style id="sliderLabelStyle" font="bold 32px" color="white" align="center">
	</style>
	<style id="sliderValueStyle" font="bold 32px" color="white" align="center">
	</style>
	<style id="sliderLeftStyle" font="32px" color="white" align="left">
		<margins left="4"/>
	</style>
	<style id="sliderRightStyle" font="32px" color="white" align="right">
		<margins right="4"/>
	</style>

	<script><![CDATA[
		var channels = [
			{ id: "covers", title: "Covers", thumbnail: "covers120.jpg", description: "Just Covers, songs you know only not by the original artists. We've got you covered.", screen_name: "covers" },
			{ id: "indiepop130", title: "Indie Pop Rocks!", thumbnail: "indychick.jpg", description: "New and favorite classic indie pop tracks.", screen_name: "indiepop" },
			{ id: "secretagent", title: "Secret Agent", thumbnail: "secretagent120.jpg", description: "The soundtrack for your stylish, mysterious, dangerous life. For Spies and PIs too!", screen_name: "secretagent" },
			{ id: "groovesalad", title: "Groove Salad", thumbnail: "groovesalad120.gif", description: "A nicely chilled plate of ambient beats and grooves.", screen_name: "groovesalad" },
			{ id: "dronezone", title: "Drone Zone", thumbnail: "dronezone120.jpg", description: "Served best chilled, safe with most medications. Atmospheric textures with minimal beats.", screen_name: "dronezone" },
			{ id: "missioncontrol", title: "Mission Control", thumbnail: "missioncontrol120.jpg", description: "Live and historic NASA mission audio mixed with electronic ambient.", screen_name: "missioncontrol" },
			{ id: "suburbsofgoa", title: "Suburbs of Goa", thumbnail: "sog120.jpg", description: "Desi-influenced Asian world beats and beyond.", screen_name: "suburbsofgoa" },
			{ id: "lush", title: "Lush", thumbnail: "lush120.jpg", description: "Sensuous and mellow vocals, mostly female, with an electronic influence.", screen_name: "lush" },
			
			{ id: "tags", title: "Tag's Trip", thumbnail: "tagstrancefract.jpg", description: "Progressive house / trance. Tip top tunes.", screen_name: "tags" },
			{ id: "u80s", title: "Underground 80s", thumbnail: "u80s-120.png", description: "Early 80s UK Synthpop and a bit of New Wave.", screen_name: "u80s" },
			{ id: "sonicuniverse", title: "Sonic Universe", thumbnail: "sonicuniverse120.jpg", description: "A mix of avant garde jazz, euro jazz and nu jazz. Eclectic takes on traditional jazz.", screen_name: "sonicuniverse" },
			{ id: "digitalis", title: "Digitalis", thumbnail: "digitalis120.gif", description: "Digitally affected analog rock to calm the agitated heart. Screengazing encouraged. ", screen_name: "digitalis" },
			{ id: "poptron", title: "PopTron!", thumbnail: "poptron120.png", description: "Electropop and indie dance rock with sparkle and pop.", screen_name: "poptron" },
			{ id: "bootliquor", title: "Boot Liquor", thumbnail: "bootliquor.gif", description: "Americana roots music with a bit of attitude. For Cowhands, Cowpokes and Cowtippers.", screen_name: "bootliquor" },
			{ id: "beatblender", title: "Beat Blender", thumbnail: "blender.gif", description: "A late night blend of deep-house and downtempo chill.", screen_name: "beatblender" },
			{ id: "doomed", title: "Doomed", thumbnail: "doomed.gif", description: "Dark music for tortured souls. A haunted industrial/ambient soundtrack.", screen_name: "doomed" },
		];
		var defaultImages = [
			{ uri: mergeURI(application.url, "./assets/default0.jpg") },
		];
		
		var channelTickSkin = function() {
			var space = 5;
			var size = 10 * space;
			var canvas = new Canvas({width:size, height:size});
			var ctx = canvas.getContext("2d");
			ctx.clearRect(0, 0, canvas.width, canvas.height);
			ctx.lineWidth = 0.5;
			ctx.strokeStyle = "white";
			for (var x = 1; x < size; x += space) {
				ctx.beginPath();
				ctx.moveTo(x, 0);
				ctx.lineTo(x, size);
				ctx.stroke();
			}
			return new Skin(new Texture(canvas, 1), {x:0, y:0, width:size, height:20}, 0, 0, { left:0, right: 0});
		}();
		
		var customEffectIndex = 0;
		var customEffects = [ new Effect, new Effect, new Effect ];
		customEffects[0].gray("black", blendColors(0.3, "#f24b2c", "black"));
		customEffects[1].gray("black", blendColors(0.3, "#77b648", "black"));
		customEffects[2].gray("black", blendColors(0.3, "#2ea7cb", "black"));
	]]></script>
	<skin id="channelBarSkin" color="white"/>

	<behavior id="ApplicationBehavior">
		<method id="onCreate" params="application"><![CDATA[
			application.focus();
		]]></method>
		<method id="onLaunch" params="application"><![CDATA[
			var preferences = this.preferences = this.readPreferences(application, "preferences", {
				radio: {
					index: 0,
					volume: 0.5,
				},
			});
			var data = this.data = {
				radio: {
					artist: "",
					busy: true,
					index: preferences.radio.index,
					running: false,
					title: "",
					volume: preferences.radio.volume,
					volumeMaximum: 1,
					volumeMinimum: 0,
				},
			};
			application.add(new Radio(data));
		]]></method>
		<method id="onQuit" params="application"><![CDATA[
		]]></method>
		<method id="readPreferences" params="application, name, preferences"><![CDATA[
			try {
				var url = mergeURI(Files.preferencesDirectory, application.di + "." + name + ".json");
				if (Files.exists(url))
					return JSON.parse(Files.readText(url));
			}
			catch(e) {
			}
			return preferences;
		]]></method>
		<method id="savePreferences"><![CDATA[
			var data = this.data;
			var preferences = this.preferences;
			preferences.radio.index = data.radio.index;
			preferences.radio.volume = data.radio.volume;
			this.writePreferences(application, "preferences", preferences);
		]]></method>
		<method id="writePreferences" params="application, name, preferences"><![CDATA[
			try {
				var url = mergeURI(Files.preferencesDirectory, application.di + "." + name + ".json");
				Files.writeText(url, JSON.stringify(preferences));
			}
			catch(e) {
			}
		]]></method>
	</behavior>
	<script><![CDATA[
		var model = application.behavior = new ApplicationBehavior(application);
	]]></script>

	<container id="Radio" left="0" right="0" top="0" bottom="0">
		<behavior>
			<method id="onCreate" params="container, $"><![CDATA[
				var data = this.data = $.radio;
				data.running = true;
			]]></method>
			<method id="onChannelChanged" params="container, index"><![CDATA[
				var data = this.data;
				if (data.index != index) {
					data.artist = "";
					data.busy = true;
					data.index = index;
					data.title = "";
					model.savePreferences();
					container.distribute("onBusyChanged");
					container.distribute("onSongChanged");
					container.first.url = Message.URI('/getAudioMedia?id=' + channels[index].id);
				}
			]]></method>
		</behavior>
		<scope with="$.radio">
			<media width="0" height="0">
				<behavior>
					<method id="onCreate" params="media, $"><![CDATA[
						this.data = $;
						media.url = Message.URI('/getAudioMedia?id=' + channels[$.index].id);
					]]></method>
					<method id="onLoaded" params="media"><![CDATA[
						var data = this.data;
						media.start();
						media.volume = data.running ? data.volume : 0;
					]]></method>
					<method id="onMetadataChanged" params="media"><![CDATA[
						var data = this.data;
						data.title = media.title;
						data.artist = media.artist;
						application.distribute("onSongChanged");
					]]></method>
					<method id="onStateChanged" params="media"><![CDATA[
						var data = this.data;
						switch (media.state) {
						case Media.FAILED:
							data.busy = true;
							break;
						case Media.PAUSED:
							data.busy = false;
							break;
						case Media.PLAYING:
							data.busy = false;
							break;
						case Media.WAITING:
							data.busy = true;
							break;
						}
						application.distribute("onBusyChanged");
					]]></method>
					<method id="onVolumeChanged" params="media, $"><![CDATA[
						media.volume = $.volume;
					]]></method>
				</behavior>
			</media>
			<container anchor="COLLAGE" like="Collage"/>
			<container anchor="TUNER" like="Tuner"/>
			<canvas left="0" width="320" top="0" height="40" active="true">
				<behavior>
					<method id="draw" params="canvas"><![CDATA[
						var ctx = canvas.getContext("2d");
						ctx.clearRect(0, 0, canvas.width, canvas.height);
						ctx.fillStyle = "white";
						var x = this.index;
						for (var i = 0; i < 16; i++) {
							var r = (x < 160) ? x * 16 / 160 : 16 - ((x - 160) * 16 / 160);
							ctx.beginPath();
							ctx.arc(x + r, 20, r, 0, 2 * Math.PI);
							ctx.closePath();
							ctx.fill();
							x += (2 * r) + 8;
						}
					]]></method>
					<method id="onBusyChanged" params="canvas"><![CDATA[
						var busy = this.data.busy;
						canvas.visible = busy;
						if (busy)
							canvas.start();
						else
							canvas.stop();
					]]></method>
					<method id="onCreate" params="canvas, $"><![CDATA[
						this.data = $;
						this.index = 15;
						this.draw(canvas);
						this.onBusyChanged(canvas);
					]]></method>
					<method id="onDisplaying" params="canvas"><![CDATA[
						canvas.interval = 25;
						canvas.start();
					]]></method>
					<method id="onTimeChanged" params="canvas"><![CDATA[
						var index = this.index - 1;
						if (index < 0)
							index = 15;
						this.index = index;
						this.draw(canvas);
					]]></method>
				</behavior>
			</canvas>	
			<scroller left="0" right="0" top="0" height="40" visible="false" active="true" loop="true" clip="true">
				<behavior>
					<method id="onBusyChanged" params="scroller"><![CDATA[
						scroller.visible = !this.data.busy;
						this.tick(scroller)
					]]></method>
					<method id="onCreate" params="scroller, $"><![CDATA[
						this.data = $;
					]]></method>
					<method id="onDisplaying" params="scroller"><![CDATA[
						this.onBusyChanged(scroller);
						this.onSongChanged(scroller);
					]]></method>
					<method id="onSongChanged" params="scroller"><![CDATA[
						var title = this.data.title;
						var artist = this.data.artist;
						if (artist) title += " - " + artist;
						scroller.first.string = " " + title + " ";
						this.tick(scroller)
					]]></method>
					<method id="onTimeChanged" params="scroller"><![CDATA[
						scroller.scrollBy(1, 0);
					]]></method>
					<method id="tick" params="scroller"><![CDATA[
						scroller.interval = 25;
						if (scroller.visible && (scroller.width < scroller.first.width))
							scroller.start();
						else
							scroller.stop();
					]]></method>
				</behavior>
				<label style="radioTitleStyle"/>
			</scroller>
			<label height="40" bottom="0" style="radioTitleStyle" string="'SOMA FM'"/>
			<container width="40" right="0" height="40" bottom="0" active="true">
				<behavior like="CONTROL.ButtonBehavior">
					<method id="onTap" params="container"><![CDATA[
						var data = {
							button: container,
							label: "Volume",
						};
						model.dialog = new VolumeDialogBox(data);
						application.run(new MenuOpenTransition, model.dialog, container);
					]]></method>
					<method id="onVolumeChanged" params="container, $"><![CDATA[
						container.first.variant = Math.min(Math.floor(4 * ($.volume - $.volumeMinimum) / ($.volumeMaximum - $.volumeMinimum)), 3);
					]]></method>
				</behavior>
				<content width="60" height="60" skin="speakerSkin" variant="Math.min(Math.floor(4 * ($.volume - $.volumeMinimum) / ($.volumeMaximum - $.volumeMinimum)), 3)"/>
			</container>
		</scope>
	</container>
	
	<container id="Collage" left="0" right="0" top="0" bottom="0">
		<behavior>
			<method id="doBrowse" params="container, delta"><![CDATA[
				var c = this.images.length;
				var i = this.index + delta;
				if (i >= c) i = 0;
				this.index = i;
				this.loading = true;
				var picture = new Picture({ left:0, top:0 });
				picture.behavior = new CollagePictureBehavior(picture, this.images[i]);
				this.data.IMAGE = picture;
			]]></method>
			<method id="onComplete" params="container, message, json"><![CDATA[
				if (json && ("result" in json) && ("images" in json.result) && json.result.images.length)
					this.images = json.result.images;
				else
					this.images = defaultImages;
				container.stop();
				this.index = 0;
				this.doBrowse(container, 0);
			]]></method>
			<method id="onCreate" params="container, $"><![CDATA[
				this.data = $;
				container.duration = 9000;
				this.images = defaultImages;
				this.index = 0;
				this.doBrowse(container, 0);
				this.onSongChanged(container);
			]]></method>
			<method id="onFinished" params="container"><![CDATA[
				if (!this.loading)
					container.run(new CollageTransition, container.first, this.data.IMAGE);
			]]></method>
			<method id="onLoaded" params="container"><![CDATA[
				if (this.data.IMAGE.ready) {
					this.loading = false;
					if (!container.transitioning && !container.running)
						container.run(new CollageTransition, container.first, this.data.IMAGE);
				}
				else
					this.doBrowse(container, 1);
			]]></method>
			<method id="onSongChanged" params="container"><![CDATA[
				var artist = this.data.artist;
				var title = this.data.title;
				var message = new Message("http://k3.cloud.kinoma.com/api");
				message.method = "POST";
				var transaction = {
					"action": "Artist",
					"method": "getImages",
					"data": {
						"artistName": artist,
						"albumName": title,
						"screenWidth": application.width,
						"screenHeight": application.height,
						"screenMode": "max",
						"shuffle": false,
						"limit": 30
					}
				}
				var body = JSON.stringify(transaction);
				message.requestText = body;
				message.setRequestHeader("Content-Length", body.length);
				container.invoke(message, Message.JSON);
			]]></method>
			<method id="onTransitionBeginning" params="container"><![CDATA[
				this.doBrowse(container, 1);
			]]></method>
			<method id="onTransitionEnded" params="container"><![CDATA[
				application.purge();
				container.time = 0;
				container.start();
			]]></method>
		</behavior>
		<content/>
	</container>
	<behavior id="CollageLayerBehavior">
		<method id="onCreate" params="layer, $"><![CDATA[
			layer.duration = 10000;
			layer.opacity = 0;
			layer.subPixel = true;
			this.dx = $.dx;
			this.dy = $.dy;
		]]></method>
		<method id="onTimeChanged" params="layer"><![CDATA[
			var dx = this.dx;
			var dy = this.dy;
			var f = layer.fraction;
			layer.translation = { x: 0 - (f * dx), y: 0 - (f * dy) };
		]]></method>
	</behavior>
	<behavior id="CollagePictureBehavior">
		<method id="onCreate" params="picture, $"><![CDATA[
			picture.aspect = "draw";
			picture.url = $.uri;
			customEffectIndex++;
			if (customEffectIndex > 2)
				customEffectIndex = 0;
			picture.effect = customEffects[customEffectIndex];
		]]></method>
		<method id="onLoaded" params="picture"><![CDATA[
			model.data.radio.COLLAGE.delegate("onLoaded");
		]]></method>
	</behavior>
	<transition id="CollageTransition" duration="1000">
		<method id="onBegin" params="container, content, picture"><![CDATA[
			var srcWidth = picture.width;
			var srcHeight = picture.height;
			var dstWidth = application.width;
			var dstHeight = application.height;
			var srcRatio = srcWidth / srcHeight;
			var dstRatio = dstWidth / dstHeight;
			var scale, dx, dy;
			if (srcRatio > dstRatio) {
				scale = dstHeight / srcHeight;
				dx = Math.round(srcWidth * scale) - dstWidth;
				dy = 0;
			}
			else {
				scale = dstWidth / srcWidth;
				dx = 0;
				dy =  Math.round(srcHeight * scale) - dstHeight;
			}
			picture.scale = { x: scale, y: scale };
			container.add(picture);
			var layer = this.layer = new Layer({ alpha: false });
			layer.capture(picture, 0, 0, dstWidth + dx, dstHeight + dy);
			var coordinates = layer.coordinates;
			layer.behavior = new CollageLayerBehavior(layer, { dx: dx, dy: dy });
			container.replace(picture, layer);
			picture.url = null;
			layer.start();
		]]></method>
		<method id="onEnd" params="container, content, picture"><![CDATA[
			container.remove(content);
		]]></method>
		<method id="onStep" params="fraction"><![CDATA[
			this.layer.opacity = Math.quadEaseOut(fraction);
		]]></method>
	</transition>
	
	<container id="Tuner" left="0" right="0" top="0" bottom="0">
		<scroller left="0" right="0" height="140" active="true" clip="true">
			<behavior like="SCROLLER.HorizontalScrollerBehavior" >
				<method id="onChannelChanged" params="scroller, index"><![CDATA[
					this.index = index;
					scroller.scroll = { x:channels[index].offset - 160, y:0 };
				]]></method>
				<method id="onCreate" params="scroller, $"><![CDATA[
					SCROLLER.HorizontalScrollerBehavior.prototype.onCreate.call(this, scroller, $);
					this.index = $.index;
				]]></method>
				<method id="onDisplaying" params="scroller"><![CDATA[
					SCROLLER.HorizontalScrollerBehavior.prototype.onDisplaying.call(this, scroller);
					scroller.scroll = { x:channels[this.index].offset - 160, y:0 };
				]]></method>
				<method id="onScrolled" params="scroller"><![CDATA[
					if (!scroller.tracking)
						scroller.bubble("onChannelChanged", this.index);
				]]></method>
				<method id="snap" params="scroller, position, direction"><![CDATA[
					var c = channels.length;
					position += 160;
					var left = channels[0].offset;
					if (position < left) {
						this.index = 0;
						return left - 160;
					}
					for (var i = 1; i < c; i++) {
						var right = channels[i].offset;
						if (position < right) {
							if (position - left < right - position) {
								this.index = i - 1;
								return left - 160;
							}
							this.index = i;
							return right - 160;
						}
						left = right;
					}
					this.index = c - 1;
					return right - 160;
				]]></method>
			</behavior>
			<layout left="0" height="140">
				<behavior>
					<method id="onMeasureHorizontally" params="layout, width"><![CDATA[
						var container = layout.first.next;
						var i = 0;
						var bottomCoordinates = { left:0, width:0, height:140, bottom:0 };
						var bottomLabelCoordinates = { left:0, right:0, height:40, bottom:10 };
						var bottomBarCoordinates = { left:0, width:3, height:35, bottom:45 };
						var topCoordinates = { left:0, width:0, top:0, height:140 };
						var topLabelCoordinates = { left:0, right:0, top:10, height:40, };
						var topBarCoordinates = { left:0, width:3, top:45, height:35 };
						while (container) {
							var channel = channels[i];
							var size = radioChannelStyle.measure(channel.title);
							var width = size.width;
							var half = width >> 1;
							if (i == 0) {
								bottomCoordinates.left = 160 - half;
								topCoordinates.left = 160 - half;
							}
							if (i % 2) {
								bottomCoordinates.width = width;
								container.coordinates = bottomCoordinates;
								container.first.coordinates = bottomLabelCoordinates;
								bottomBarCoordinates.left = half - ((bottomCoordinates.left + half) % 5);
								container.last.coordinates = bottomBarCoordinates;
								channel.offset = bottomCoordinates.left + bottomBarCoordinates.left + 1;
								bottomCoordinates.left += width;
							}
							else {
								topCoordinates.width = width;
								container.coordinates = topCoordinates;
								container.first.coordinates = topLabelCoordinates;
								topBarCoordinates.left = half - ((topCoordinates.left + half) % 5);
								container.last.coordinates = topBarCoordinates;
								channel.offset = topCoordinates.left + topBarCoordinates.left;
								topCoordinates.left += width;
							}
							container = container.next;
							i++;
						}
						bottomCoordinates.left += 160 - half;
						topCoordinates.left += 160 - half;
						return Math.max(bottomCoordinates.left, topCoordinates.left);
					]]></method>
				</behavior>
				<content left="-320" right="-320" height="20" skin="channelTickSkin"/>
				<iterate on="channels">
					<container>
						<label style="radioChannelStyle" string="$.title"/>
						<content skin="channelBarSkin"/>
					</container>
				</iterate>
			</layout>
			<canvas left="145" width="30" height="30" active="true">
				<behavior>
					<method id="draw" params="canvas"><![CDATA[
						var ctx = canvas.getContext("2d");
						ctx.clearRect(0, 0, canvas.width, canvas.height);
						ctx.beginPath();
						ctx.arc(16, 15, 11, 0, 2 * Math.PI);
						ctx.closePath();
						ctx.lineWidth = 2;
						ctx.fillStyle = "black";
						ctx.fill();
						ctx.strokeStyle = "white";
						ctx.stroke();
					]]></method>
					<method id="onCreate" params="canvas, $"><![CDATA[
						this.data = $;
						this.draw(canvas);
					]]></method>
				</behavior>
			</canvas>	
		</scroller>
	</container>
	
	<container id="VolumeDialogBox" left="0" right="0" top="0" bottom="0" active="true" skin="THEME.cancellerSkin">
		<behavior>
			<method id="onCancel" params="container"><![CDATA[
				this.former.focus();
				model.dialog = null;
				application.run(new MenuCloseTransition, container, this.data.button);
			]]></method>
			<method id="onCreate" params="container, data"><![CDATA[
				this.data = data;
			]]></method>
			<method id="onDisplaying" params="container"><![CDATA[
				this.former = container.focus();
			]]></method>
			<method id="onKeyDown" params="container, key, repeat, ticks"><![CDATA[
				var code = key.charCodeAt(0);
				if ((code == 8) || (code == 0xF0001)) {
					this.onCancel(container);
					return true;
				}
			]]></method>
			<method id="onTouchEnded" params="container, id, x, y, ticks"><![CDATA[
				this.onCancel(container);
			]]></method>
		</behavior>
		<container left="0" right="0" height="95">
			<label left="0" right="0" top="0" style="sliderLabelStyle" string="'Volume'"/>
			<label left="0" right="0" top="15" style="sliderLeftStyle" string="'Low'"/>
			<label left="0" right="0" top="15" style="sliderRightStyle" string="'High'"/>
			<label left="0" right="0" bottom="5" style="sliderValueStyle"/>
			<canvas left="0" right="0" top="15" bottom="0" active="true">
				<behavior like="CONTROL.SliderBehavior">
					<method id="draw" params="canvas"><![CDATA[
						var size = canvas.width;
						var offset = this.getOffset(canvas, size);
						var x = canvas.width >> 1;
						var y = canvas.height >> 1;
						var w = 20;
						var a = Math.atan2(y, x);
						var r = ((x * x) + (y * y)) / y;
						var from = 0 - a - (Math.PI / 2);
						var to = a - (Math.PI / 2);
						y = r + ((y + w) >> 1);
						var ctx = canvas.getContext("2d");
						ctx.clearRect(0, 0, canvas.width, canvas.height);
						ctx.lineWidth = w;
						ctx.strokeStyle = "#FFFFFF";
						ctx.beginPath();
						ctx.arc(x, y, r, from, to);
						ctx.stroke();
						ctx.strokeStyle = "#acd473";
						ctx.beginPath();
						ctx.arc(x, y, r, from, from + ((to - from) * offset / size));
						ctx.stroke();
					]]></method>
					<method id="getMax" params="container"><![CDATA[
						return model.data.radio.volumeMaximum;
					]]></method>
					<method id="getMin" params="container"><![CDATA[
						return model.data.radio.volumeMinimum;
					]]></method>
					<method id="getValue" params="container"><![CDATA[
						return model.data.radio.volume;
					]]></method>
					<method id="onTouchBegan" params="container, id, x, y, ticks"><![CDATA[
						container.captureTouch(id, x, y, ticks);
						this.onTouchMoved(container, id, x, y, ticks);
					]]></method>
					<method id="onTouchEnded" params="container, id, x, y, ticks"><![CDATA[
						model.savePreferences();
					]]></method>
					<method id="onTouchMoved" params="canvas, id, x, y, ticks"><![CDATA[
						var size = canvas.width;
						var offset = (x - canvas.x);
						this.setOffset(canvas, size, offset);
						this.onValueChanged(canvas);
					]]></method>
					<method id="onValueChanged" params="container"><![CDATA[
						this.draw(container);
						var min = this.getMin(container);
						var max = this.getMax(container);
						var value = this.getValue(container);
						if (container.active)
							container.previous.string = Math.round(100 * (value - min) / (max - min)) + "%";
						else
							container.previous.string = "";
					]]></method>
					<method id="onVolumeChanged" params="container, $"><![CDATA[
						this.onValueChanged(container);
					]]></method>
					<method id="setValue" params="container, value"><![CDATA[
						model.data.radio.volume = value;
						application.distribute("onVolumeChanged", model.data.radio);
					]]></method>
				</behavior>
			</canvas>
		</container>
	</container>
	
	<handler path="/dial">
		<behavior>
			<method id="onInvoke" params="handler, message"><![CDATA[
				var query = parseQuery(message.query);
				var radio = model.data.radio;
				channels.some(function(channel, index) {
					if (channel.id == query.id) {
						application.distribute("onChannelChanged", index);
						return true;
					}
				});
				radio.volume = query.volume / 100;
				application.distribute("onVolumeChanged", radio);
			]]></method>
		</behavior>
	</handler>

	<handler path="/getAudioMedia">
		<behavior>
			<method id="onComplete" params="handler, message, text"><![CDATA[
				var value;
				var lines = text.split("\n");
				var c = lines.length;
				if (lines[0] == "[playlist]") {
					for (var i = 1; i < c; i++) {
						var pair = lines[i].split("=");
						if (pair.length == 2) {
							var name = pair[0].toLowerCase();
							if (name.indexOf("file") == 0) {
								value = pair[1];
								break;
							}
						}
					}
				}
				if (value)
					handler.redirect(value, "audio/mpeg");
			]]></method>
			<method id="onInvoke" params="handler, message"><![CDATA[
				var query = parseQuery(message.query);
				var message = new Message("http://somafm.com/" + query.id + ".pls");
				handler.invoke(message, Message.TEXT);
			]]></method>
		</behavior>
	</handler>
	
	<handler path="/getImages">
		<behavior>
			<method id="onComplete" params="handler, message, json"><![CDATA[
				if (json && (true == json.result.success)) {
					handler.message.setResponseHeader("Content-Type", "text/plain");
					handler.message.responseText = JSON.stringify(json.result);
				}
			]]></method>
			<method id="onInvoke" params="handler, message"><![CDATA[
				var query = parseQuery(message.query);
				var message = new Message("http://k3.cloud.kinoma.com/api");
				message.method = "POST";
				var transaction = {
					"action": "Artist",
					"method": "getImages",
					"data": {
						"artistName": query.artist,
						"albumName": query.album,
						"screenWidth": query.width,
						"screenHeight": query.height,
						"screenMode": "max",
						"shuffle": false,
						"limit": 30
					}
				};		
				var body = JSON.stringify(transaction);
				message.requestText = body;
				message.setRequestHeader("Content-Length", body.length);
				handler.invoke(message, Message.JSON);
			]]></method>
		</behavior>
	</handler>

	<transition id="MenuOpenTransition" duration="250"><![CDATA[
		function onBegin(container, content, button) {
			container.add(content);
			this.canceller = content;
			var layer = this.layer = new Layer({alpha: true});
			layer.attach(content.first);
			if (!button)
				button = container;
			this.translation = { 
				x: button.x + (button.width / 2) - layer.x, 
				y: button.y + (button.height / 2) - layer.y, 
			}; 
		}
		function onEnd(container, content) {
			this.layer.detach();
		}
		function onStep(fraction) {
			this.layer.scale = { x: fraction, y: fraction };
			this.layer.translation = { x: this.translation.x * (1 - fraction), y: this.translation.y * (1 - Math.quadEaseIn(fraction)) };
			this.canceller.state = fraction;
		}
	]]></transition>
	
	<transition id="MenuCloseTransition" duration="250"><![CDATA[
		function onBegin(container, content, button) {
			this.canceller = content;
			var layer = this.layer = new Layer({alpha: true});
			layer.attach(content.first);
			layer.opacity = 1;
			if (!button)
				button = container;
			this.translation = { 
				x: button.x + (button.width / 2) - layer.x, 
				y: button.y + (button.height / 2) - layer.y, 
			}; 
		}
		function onEnd(container, content) {
			this.layer.detach();
			container.remove(content);
		}
		function onStep(fraction) {
			fraction = Math.quadEaseOut(fraction);
			this.layer.scale = { x: 1 - fraction, y: 1 - fraction };
			this.layer.translation = { x: this.translation.x * fraction, y: this.translation.y * fraction };
			this.canceller.state = 1 - fraction;
		}
	]]></transition>
</program>
