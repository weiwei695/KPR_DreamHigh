<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">

	<behavior id="SliderBehavior"><![CDATA[
		function getMax(canvas) {
			return this.data.max;
		}
		function getMin(canvas) {
			return this.data.min;
		}
		function getOffset(canvas, size) {
			var min = this.getMin(canvas);
			var max = this.getMax(canvas);
			var value = this.getValue(canvas);
			return Math.round(((value - min) * size) / (max - min));
		}
		function getValue(canvas) {
			return this.data.value;
		}
		function onCreate(canvas, data) {
			this.data = data;
			this.tracking = false;
		}
		function onDisplaying(canvas) {
			this.onValueChanged(canvas);
		}
		function onTouchBegan(canvas, id, x, y, ticks) {
			canvas.captureTouch(id, x, y, ticks);
			this.tracking = true;
			this.onTouchMoved(canvas, id, x, y, ticks);
		}
		function onTouchEnded(canvas, id, x, y, ticks) {
			this.tracking = false;
		}
		function onTouchMoved(canvas, id, x, y, ticks) {
			var size = (canvas.width - canvas.height);
			var offset = (x - (canvas.height >> 1) - canvas.x);
			this.setOffset(canvas, size, offset);
			this.onValueChanged(canvas);
		}
		function onValueChanged(canvas) {
			var ctx = canvas.getContext("2d");
			var width = canvas.width;
			var height = canvas.height;
			var size = (width - height);
			var x = height >> 1;
			var y = height >> 1;
			var delta = height >> 2;
			
			ctx.clearRect(0, 0, width, height);
			ctx.beginPath();
			ctx.moveTo(x, y);
			ctx.lineTo(width - x, y);
			ctx.stroke();
			x = x + this.getOffset(canvas, size);
			y = height >> 1;
			
			ctx.beginPath();
			ctx.moveTo(x, y);
			ctx.lineTo(x - delta, y + delta);
			ctx.lineTo(x + delta, y + delta);
			ctx.closePath();
			ctx.fill();
			
			ctx.font = "16px Helvetica";
			size = ctx.measureText(this.data.label);
			ctx.fillText(this.data.label, (width - size.width) >> 1, y - 4);
		}
		function setOffset(canvas, size, offset) {
			var min = this.getMin(canvas);
			var max = this.getMax(canvas);
			var value = min + ((offset * (max - min)) / size);
			if (value < min) value = min;
			else if (value > max) value = max;
			this.setValue(canvas, value);
		}
		function setValue(canvas, value) {
			this.data.value = value;
			canvas.container.container.distribute("onChanged");
		}
	]]></behavior>

	<skin id="backgroundSkin" color="#F0F0F0"/>
	
	<container id="KinomaGraphScreen" left="0" right="0" top="0" bottom="0" skin="backgroundSkin">
		<canvas left="0" right="0" top="0" bottom="40" active="true">
			<behavior><![CDATA[
				function computeRadianStep(step) {
					var count = Math.round(360 / step);
					if (count & 1) count++;
					step = 360 / count;
					if (step < 1) step = 1;
					return step * Math.PI / 180;
				}
				function draw(canvas) {
					var ctx = canvas.getContext("2d");
					ctx.clearRect(0, 0, canvas.width, canvas.height);
					var dark = "#F0F0F0"
					var lite = "white"
					var centerX = canvas.width / 2;
					var centerY = canvas.height / 2;
					var radius = this.big.length + this.small.length + 10;
					var step = this.big.step;
					var limit = 2 * Math.PI;
					var flag = true;
					ctx.fillStyle = lite;
					ctx.beginPath();
					ctx.arc(centerX, centerY, radius, 0, 360);
					ctx.fill();
					ctx.lineWidth = 10;
					for (var angle = 0; angle < limit; angle += step) {
						ctx.strokeStyle = flag ? dark : lite;
						flag = !flag;
						ctx.beginPath();
						ctx.arc(centerX, centerY, radius, angle, angle + step);
						ctx.stroke();
					}
					angle = this.big.angle;
					centerX += this.big.length * Math.cos(angle);
					centerY += this.big.length * Math.sin(angle);
					radius = this.small.length;
					step = this.small.step;
					var currentX = centerX + this.small.length * Math.cos(this.small.angle);
					var currentY = centerY + this.small.length * Math.sin(this.small.angle);
					if (this.data.playing)
						canvas.next.delegate("draw", currentX, currentY, angle);
					angle += this.small.angle;
					limit += angle;
					flag = true;
					ctx.fillStyle = dark;
					ctx.beginPath();
					ctx.arc(centerX, centerY, radius, 0, 360);
					ctx.fill();
					ctx.lineWidth = 10;
					for (; angle < limit; angle += step) {
						ctx.strokeStyle = flag ? dark : lite;
						flag = !flag;
						ctx.beginPath();
						ctx.arc(centerX, centerY, radius, angle, angle + step);
						ctx.stroke();
					}
					ctx.lineWidth = 5;
					ctx.strokeStyle = "#E0E0E0";
					ctx.beginPath();
					ctx.moveTo(canvas.width / 2, canvas.height / 2);
					ctx.lineTo(centerX, centerY);
					ctx.stroke();
					ctx.beginPath();
					ctx.moveTo(centerX, centerY);
					ctx.lineTo(currentX, currentY);
					ctx.stroke();
				}
				function onCreate(canvas, data) {
					canvas.interval = 25;
					this.data = data;
					this.big = { angle: 0 };
					this.small = { angle: 0 };
				}
				function onChanged(canvas) {
					var size = (Math.min(canvas.width, canvas.height) >> 1) - 20;
					var step = this.data.step.value;
					var small = this.small.length = size * this.data.radius.value;
					var big = this.big.length = size - small;
					this.big.step = this.computeRadianStep(step);
					this.small.step = this.computeRadianStep((step * (big + small)) / small);
					if (this.data.playing)
						canvas.start();
					else
						canvas.stop();
					this.draw(canvas);
				}
				function onDisplaying(canvas) {
					this.onChanged(canvas);
				}
				function onTimeChanged(canvas) {
					this.big.angle += this.big.step;
					this.small.angle -= this.small.step;
					this.draw(canvas);
				}
			]]></behavior>
		</canvas>
		<canvas left="0" right="0" top="0" bottom="40" active="true">
			<behavior><![CDATA[
				function draw(canvas, x, y, angle) {
					if (this.first)
						this.first = false;
					else {
						var ctx = canvas.getContext("2d");
						ctx.strokeStyle = "hsl(" + (Math.round(angle * 180 / Math.PI) % 360) + ",100%,50%)";
						ctx.beginPath();
						ctx.moveTo(this.x, this.y);
						ctx.lineTo(x, y);
						ctx.stroke();
					}
					this.x = x; 
					this.y = y;	
				}
				function erase(canvas) {
					var ctx = canvas.getContext("2d");
					ctx.clearRect(0, 0, canvas.width, canvas.height);
					this.first = true;
				}
				function onChanged(canvas) {
					this.erase(canvas);
				}
				function onDisplaying(canvas) {
					this.erase(canvas);
				}
			]]></behavior>
		</canvas>
		<line left="0" right="0" height="40" bottom="0">
			<scope with="$.radius">
				<canvas left="0" right="0" top="0" bottom="0" active="true" behavior="SliderBehavior"/>
			</scope>
			<canvas width="40" top="0" bottom="0" active="true">
				<behavior><![CDATA[
					function draw(canvas) {
						var ctx = canvas.getContext("2d");
						ctx.clearRect(0, 0, canvas.width, canvas.height);
						ctx.fillStyle = this.tracking ? "aqua" : "black";
						if (this.data.playing) {
							ctx.fillRect(7, 5, 10, 30);
							ctx.fillRect(23, 5, 10, 30);
						}
						else {
							ctx.beginPath();
							ctx.moveTo(35, 20);
							ctx.lineTo(5, 5);
							ctx.lineTo(5, 35);
							ctx.closePath();
							ctx.fill();
						}
					}
					function onCreate(canvas, data) {
						this.data = data;
						this.tracking = false;
					}
					function onDisplaying(canvas, data) {
						this.draw(canvas);
					}
					function onTouchBegan(canvas, id, x, y, ticks) {
						canvas.captureTouch(id, x, y, ticks);
						this.tracking = true;
						this.draw(canvas);
					}
					function onTouchEnded(canvas, id, x, y, ticks) {
						this.tracking = false;
						this.data.playing = !this.data.playing;
						this.draw(canvas);
						canvas.container.container.distribute("onChanged");
					}
				]]></behavior>
			</canvas>
			<scope with="$.step">
				<canvas left="0" right="0" top="0" bottom="0" active="true" behavior="SliderBehavior"/>
			</scope>
		</line>
	</container>

	<script><![CDATA[
		var data = {
			playing: false,
			radius: { label: "Radius", min:0.1, max:0.9, value: 0.25 },
			step: { label: "Steps", min:1, max:10, value: 4 }
		};
		application.add(new KinomaGraphScreen(data));
	]]></script>
	
</program>
